<?xml version="1.0" encoding="utf-8"?>
<search>
    
    
    <entry>
        <title><![CDATA[Flutter開発参考サイトまとめ]]></title>
        <url>https://yuuzn.github.io/2021/04/22/flutter-reference/</url>
        <content type="html"><![CDATA[<p>参考文献<br><br> ★…オフィシャル<br><br> ☆…オフィシャルに近い<br></p>
<h1 id="基本から順に学べるサイト"><a href="#基本から順に学べるサイト" class="headerlink" title="基本から順に学べるサイト"></a>基本から順に学べるサイト</h1><ul>
<li>Flutter Doc JP ☆<ul>
<li><a href="https://flutter.ctrnost.com/" target="_blank" rel="noopener">https://flutter.ctrnost.com/</a></li>
</ul>
</li>
<li>はじめてのFlutterアプリ開発<ul>
<li><a href="https://zenn.dev/omatsu/books/9ff274f3045092067378/viewer/first-flutter02" target="_blank" rel="noopener">https://zenn.dev/omatsu/books/9ff274f3045092067378/viewer/first-flutter02</a></li>
</ul>
</li>
<li>KBOYのFlutter大学<ul>
<li><a href="https://zenn.dev/kboy/books/ca6a9c93fd23f3/viewer/ea34d9" target="_blank" rel="noopener">https://zenn.dev/kboy/books/ca6a9c93fd23f3/viewer/ea34d9</a></li>
<li>Youtubeも人気あるらしい</li>
</ul>
</li>
<li>社内の「マイクロラーニング」で視聴できるFlutter講座の動画も質が高いです<ul>
<li><a href="https://www.linkedin.com/learning/flutter-part-01-introduction/the-anatomy-of-a-flutter-app?u=2173282" target="_blank" rel="noopener">https://www.linkedin.com/learning/flutter-part-01-introduction/the-anatomy-of-a-flutter-app?u=2173282</a></li>
<li><a href="https://www.linkedin.com/learning/flutter-part-03-flutter-widgets/flutter-card-and-listtile-widgets?u=2173282" target="_blank" rel="noopener">https://www.linkedin.com/learning/flutter-part-03-flutter-widgets/flutter-card-and-listtile-widgets?u=2173282</a></li>
</ul>
</li>
</ul>
<h1 id="Widgetの使い方"><a href="#Widgetの使い方" class="headerlink" title="Widgetの使い方"></a>Widgetの使い方</h1><ul>
<li>widgets library ★<ul>
<li><a href="https://api.flutter.dev/flutter/widgets/widgets-library.html" target="_blank" rel="noopener">https://api.flutter.dev/flutter/widgets/widgets-library.html</a></li>
<li>『Classes』の一覧に各Widgetのリンクがある</li>
</ul>
</li>
<li>Widget category ★<ul>
<li><a href="https://flutter.dev/docs/development/ui/widgets" target="_blank" rel="noopener">https://flutter.dev/docs/development/ui/widgets</a></li>
</ul>
</li>
<li>Widget逆引き集<ul>
<li><a href="https://capytaku.com/flutter-reverse-pull-collection/#%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88%E3%81%AE%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E6%B1%BA%E3%82%81%E3%81%9F%E3%81%84" target="_blank" rel="noopener">https://capytaku.com/flutter-reverse-pull-collection/#%E3%82%A6%E3%82%A3%E3%82%B8%E3%82%A7%E3%83%83%E3%83%88%E3%81%AE%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E6%B1%BA%E3%82%81%E3%81%9F%E3%81%84</a> </li>
</ul>
</li>
<li>各種マテリアルWidgetの使い方<ul>
<li><a href="https://flutter.keicode.com/basics/index-material.php" target="_blank" rel="noopener">https://flutter.keicode.com/basics/index-material.php</a></li>
</ul>
</li>
<li>Flutter Awesome ★？？<ul>
<li><a href="https://flutterawesome.com/" target="_blank" rel="noopener">https://flutterawesome.com/</a></li>
<li>アイディア集？的な。見た目から入れる</li>
</ul>
</li>
</ul>
<h1 id="各機能実装方法"><a href="#各機能実装方法" class="headerlink" title="各機能実装方法"></a>各機能実装方法</h1><ul>
<li>cookbook ★<ul>
<li><a href="https://flutter.dev/docs/cookbook" target="_blank" rel="noopener">https://flutter.dev/docs/cookbook</a></li>
<li>例：画面遷移　<a href="https://flutter.dev/docs/cookbook/navigation/named-routes" target="_blank" rel="noopener">https://flutter.dev/docs/cookbook/navigation/named-routes</a></li>
</ul>
</li>
</ul>
<h1 id="パッケージ"><a href="#パッケージ" class="headerlink" title="パッケージ"></a>パッケージ</h1><ul>
<li>pub.dev ★<ul>
<li><a href="https://pub.dev/" target="_blank" rel="noopener">https://pub.dev/</a></li>
<li>例：音声入力　<a href="https://pub.dev/flutter/packages?q=speech" target="_blank" rel="noopener">https://pub.dev/flutter/packages?q=speech</a><ul>
<li>Speech_to_text <a href="https://pub.dev/packages/speech_to_text" target="_blank" rel="noopener">https://pub.dev/packages/speech_to_text</a>  ←バージョンが合わず、断念</li>
<li>flutter_speech　<a href="https://pub.dev/packages/flutter_speech/install" target="_blank" rel="noopener">https://pub.dev/packages/flutter_speech/install</a>　←現在はこれで音声入力可な状態</li>
<li>Speech_recognition <a href="https://pub.dev/packages/speech_recognition" target="_blank" rel="noopener">https://pub.dev/packages/speech_recognition</a> ←まだ試していない　　</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="データベース検討"><a href="#データベース検討" class="headerlink" title="データベース検討"></a>データベース検討</h1><ul>
<li>Dart/FlutterのローカルDBの比較<ul>
<li><a href="https://kabochapo.hateblo.jp/entry/2020/02/01/144411" target="_blank" rel="noopener">https://kabochapo.hateblo.jp/entry/2020/02/01/144411</a></li>
</ul>
</li>
<li>NoSQL HIVE<ul>
<li><a href="https://qiita.com/kasa_le/items/f39d759741c736f1d600" target="_blank" rel="noopener">https://qiita.com/kasa_le/items/f39d759741c736f1d600</a></li>
<li><a href="https://crieit.net/posts/Flutter-Hive" target="_blank" rel="noopener">https://crieit.net/posts/Flutter-Hive</a></li>
</ul>
</li>
<li>SQLite(SQFLite)使用方法<ul>
<li><a href="https://flutter.ctrnost.com/logic/sqlite/" target="_blank" rel="noopener">https://flutter.ctrnost.com/logic/sqlite/</a></li>
<li><a href="https://www.finddevguides.com/Flutter-database-concepts" target="_blank" rel="noopener">https://www.finddevguides.com/Flutter-database-concepts</a></li>
<li><a href="https://qiita.com/umechanhika/items/47429c4d37ac733385ab" target="_blank" rel="noopener">https://qiita.com/umechanhika/items/47429c4d37ac733385ab</a></li>
<li><a href="https://tamappe.com/2020/02/10/2020-02-10-200000/" target="_blank" rel="noopener">https://tamappe.com/2020/02/10/2020-02-10-200000/</a></li>
<li><a href="https://iganin.hatenablog.com/entry/2019/01/09/010804" target="_blank" rel="noopener">https://iganin.hatenablog.com/entry/2019/01/09/010804</a></li>
<li><a href="https://kehalife.com/flutter-sqflite/" target="_blank" rel="noopener">https://kehalife.com/flutter-sqflite/</a> </li>
</ul>
</li>
</ul>
<h1 id="同期非同期処理"><a href="#同期非同期処理" class="headerlink" title="同期非同期処理"></a>同期非同期処理</h1><ul>
<li>Dartのasync/awaitを理解したい<ul>
<li><a href="https://medium.com/@kawanojieee/dart-async-await-394846fb3d2c" target="_blank" rel="noopener">https://medium.com/@kawanojieee/dart-async-await-394846fb3d2c</a></li>
</ul>
</li>
</ul>
<h1 id="AndroidStudio-×-svn"><a href="#AndroidStudio-×-svn" class="headerlink" title="AndroidStudio × svn"></a>AndroidStudio × svn</h1><ul>
<li>svn連携方法<ul>
<li><a href="https://gihyo.jp/dev/serial/01/android_studio/0028" target="_blank" rel="noopener">https://gihyo.jp/dev/serial/01/android_studio/0028</a></li>
</ul>
</li>
<li>コミット通知設定<ul>
<li><a href="https://gihyo.jp/dev/serial/01/android_studio/0029?page=1" target="_blank" rel="noopener">https://gihyo.jp/dev/serial/01/android_studio/0029?page=1</a></li>
</ul>
</li>
</ul>
<h1 id="機能事例集"><a href="#機能事例集" class="headerlink" title="機能事例集"></a>機能事例集</h1><ul>
<li>テーマごと<ul>
<li><a href="https://dev.classmethod.jp/tags/flutter/" target="_blank" rel="noopener">https://dev.classmethod.jp/tags/flutter/</a></li>
</ul>
</li>
</ul>
<h1 id="Flutterコマンド"><a href="#Flutterコマンド" class="headerlink" title="Flutterコマンド"></a>Flutterコマンド</h1><ul>
<li>Flutterコマンド一覧まとめ<ul>
<li><a href="https://qiita.com/kurun_pan/items/f9251b1827ce9dca9e14" target="_blank" rel="noopener">https://qiita.com/kurun_pan/items/f9251b1827ce9dca9e14</a></li>
</ul>
</li>
</ul>
<h1 id="便利ツール"><a href="#便利ツール" class="headerlink" title="便利ツール"></a>便利ツール</h1><ul>
<li>Flutter Studio<ul>
<li><a href="https://flutterstudio.app/" target="_blank" rel="noopener">https://flutterstudio.app/</a></li>
<li>実装したいパーツをドラッグすると、ソースコードが生成される（基本的なパーツのみ有る）</li>
</ul>
</li>
</ul>
<h1 id="本"><a href="#本" class="headerlink" title="本"></a>本</h1><p>紙の本は4冊くらいしか現時点で市販されていない。。おススメ順に上から</p>
<ul>
<li>基礎から学ぶ Flutter<ul>
<li><a href="https://www.amazon.co.jp/%E5%9F%BA%E7%A4%8E%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6-Flutter-%E7%9F%B3%E4%BA%95%E5%B9%B8%E6%AC%A1-ebook/dp/B082XQ81FH/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-1" target="_blank" rel="noopener">https://www.amazon.co.jp/%E5%9F%BA%E7%A4%8E%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6-Flutter-%E7%9F%B3%E4%BA%95%E5%B9%B8%E6%AC%A1-ebook/dp/B082XQ81FH/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-1</a></li>
<li>店頭に無かった&amp;存在に気付けず、買いそびれた。もういちど買いなおすならこれを買う</li>
</ul>
</li>
<li>Android/iOSクロス開発フレームワーク Flutter入門<ul>
<li><a href="https://www.amazon.co.jp/Android-iOS%E3%82%AF%E3%83%AD%E3%82%B9%E9%96%8B%E7%99%BA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Flutter%E5%85%A5%E9%96%80-%E6%8E%8C%E7%94%B0%E6%B4%A5%E8%80%B6%E4%B9%83/dp/4798055832/ref=sr_1_4?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-4" target="_blank" rel="noopener">https://www.amazon.co.jp/Android-iOS%E3%82%AF%E3%83%AD%E3%82%B9%E9%96%8B%E7%99%BA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Flutter%E5%85%A5%E9%96%80-%E6%8E%8C%E7%94%B0%E6%B4%A5%E8%80%B6%E4%B9%83/dp/4798055832/ref=sr_1_4?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-4</a></li>
<li>少々古いが理論までしっかり書いてあった</li>
</ul>
</li>
<li>Flutter　モバイルアプリ開発バイブル<ul>
<li><a href="https://www.amazon.co.jp/Flutter-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%E5%8D%97%E9%87%8C-%E5%8B%87%E6%B0%97-ebook/dp/B07Z9DYYBY/ref=sr_1_3?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-3" target="_blank" rel="noopener">https://www.amazon.co.jp/Flutter-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%83%90%E3%82%A4%E3%83%96%E3%83%AB-%E5%8D%97%E9%87%8C-%E5%8B%87%E6%B0%97-ebook/dp/B07Z9DYYBY/ref=sr_1_3?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-3</a></li>
<li>バイブルと言えるほど書いてなく、いまひとつだった</li>
</ul>
</li>
<li>はじめてのFlutter<ul>
<li><a href="https://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEFlutter-I%E3%83%BB-BOOKS-%E6%96%B0%E4%BA%95-%E5%85%8B%E4%BA%BA/dp/4777521311/ref=sr_1_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-2" target="_blank" rel="noopener">https://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEFlutter-I%E3%83%BB-BOOKS-%E6%96%B0%E4%BA%95-%E5%85%8B%E4%BA%BA/dp/4777521311/ref=sr_1_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;dchild=1&amp;keywords=flutter&amp;qid=1617176370&amp;s=books&amp;sr=1-2</a></li>
<li>このくらいなら本でなく、Webサイト見ながらでカバーできそう</li>
</ul>
</li>
</ul>
]]></content>
        
        <categories>
            
            <category> flutter </category>
            
        </categories>
        
        
        <tags>
            
            <tag> flutter </tag>
            
            <tag> study </tag>
            
            <tag> development </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[全国民に観てほしい純愛ドラマ～全私が泣いた～]]></title>
        <url>https://yuuzn.github.io/2021/02/18/chuugakuseinikki/</url>
        <content type="html"><![CDATA[<p>全私が泣いた<br><br><br><br>みんなの気持ちがわかっちゃって、誰の味方になったらいいのか見方が最後までわからないドラマだった。こういうのを”傑作”と呼ぶのだろう<br><br>全国民にみてほしい深いメッセージ性と高い完成度。<br><br>Amazonプライムで見れます。<br><br>私は少しずつ日をあけてみていて（1話ごと余韻すんごくて）、中盤、このドラマやばくない？（すごすぎない？？）って思って公式パンフみたいなのも買っちゃうくらい（映画のパンフレットいつから買わなくなったっけ。）ハマりました進行形~<br><br><br><br><br></p>
<p>このドラマのテーマはつまるところ、なにかというと、<br><br>私の解釈では、<br><br>『人生に正解はないから自分が納得ながら進むしかなくて、人はだれもが未完成なまま”大人”をしていて、だからこそ支え合っているんだよ』<br><br>ってことを一番受けとったかなぁ.. 長くなりました。し、これに収まらない、一言じゃとても言えない壮大な永遠のテーマが詰められてたんです。<br><br><br><br><br><br><br><br></p>
<p>純愛、結婚のかたち、適職とは、家族愛、仕事の責任、子離れ親離れ問題、人との距離のとりかた、時には時間が解決する、シングルで育てる、なりたい職業の更新、生き方、様々な感情(心配、嫉妬、悲しみ、高揚、愛しみ、好き)、周りを気にしないこと、思いやり、反対される恋、年齢とは、大人とは、幸せとは<br><br><br><br><br><br><br><br><br></p>
<p>ドラマをみていて、<br>最初は、ビジュアルすっご(俳優さん男女皆、景色、音楽も含めて)って思って引き寄せられていたのですが、<br><br>どんどん色んな人の気持ちが絡み合ったり、<br><br>色んな立場から言ったり言われたり、<br><br>結婚と仕事のバランスとか重きの置き方とか、<br><br>子供と大人の違いとか、子供だってわかってるとか、<br><br>社会性とか、<br><br>自分の気持ちだけじゃどうしようもないことと、<br><br>周りがなんとかしてあげられることと、<br><br>おせっかいと愛情の絶妙なラインとか、<br><br>ここぞというとこで頑張る、気持ちを抑えて乗り切る、とか、<br><br>ここは自分の気持ちに素直に、とか<br><br>機微を、ここぞとばかりに随所で表現されていて<br><br>繊細なタッチだけどメッセージはずっしり。その塩梅もまた心地よくて。<br><br><br><br><br><br>ほんとにほんとにすごいドラマだった。語彙力の戦闘値がゼロになるくらい、そのくらい、それ以上、すごくて。<br><br><br><br><br><br><br><br><br><br></p>
<p>最終話観た後にようやく公式パンフを読みました。隅から隅まで一気読みでした。<br><br>俳優さんたちやスタッフさんの名言が散りばめられたすばらしいbookでした。<br><br>簡単にご紹介をば。<br><br><img src="/image/chuugakuseinikki/officialBook.png" alt title="chuugakuseiBook"><br><br><br><br><br></p>
<blockquote>
<p>『どちらも一生共存して生きていくんだろうなと』（大人になろうとする聖と、なりきれない聖と二人いて。）<br><br><br>『感情の紡ぎかたが本当に丁寧』<br><br><br>— by 有村架純<br><br><br><br></p>
</blockquote>
<blockquote>
<p>『色んな葛藤を持ちながら生きてるみんなが最終的に納得できるような世界になればいいなぁと』<br><br><br>『尊くて純粋で繊細で、本当に美しい作品』<br><br><br>— by 岡田健史<br><br><br><br></p>
</blockquote>
<blockquote>
<p>『それぞれの正義、それぞれの思い』<br><br><br>— by 町田啓太<br><br><br><br></p>
</blockquote>
<blockquote>
<p>『恋する気持ちに大人も子どももないんだな』<br><br><br>『そもそも恋愛と道徳って、要は本能と理性だから、結局は相容れないものなんですよね。だから恋愛にモラルを求めること自体がナンセンスだし、そんなことを考える隙もないくらい没入してしまうのが恋愛の本質だと思うんですよ』<br><br><br>『誰にとっても未来のある結末になればいいな』<br><br><br>— by 吉田羊<br><br><br><br></p>
</blockquote>
<blockquote>
<p>『今のドラマにはラブストーリーが少ないから、なぜだろうと思ってましたし』<br><br><br>『～前略～　でもそこまでしても貫きたい恋だったという』<br><br><br>— by プロデューサー　新井順子<br><br><br><br></p>
</blockquote>
<blockquote>
<p>『晶に追われ、隣では勝太郎さんが車のハンドルを握っている。でも、聖ちゃんは一人で歩かなきゃいけないんだって。一人で立って初めて答えが出てくると』<br><br><br>— by 脚本家　金子ありさ<br><br><br><br></p>
</blockquote>
<blockquote>
<p>『全ての登場人物がそれぞれに間違っていて、全員ダメで、全員ちょっとずつ上手くなくて』<br><br><br>『正しさは人間のキャラクターに必要ないんだなという驚きをもらえるような作品』<br><br><br>『いろんな意味合いでの愛情というものを見つめ直して獲得していく話』<br><br><br>『個人個人で見ると納得できても、全体で見るとやっぱり違和感がある。それが社会の構図だと思うので』<br><br><br>『ある男の子が誰かを好きになったという気持ちはこんなに淡くて脆いのだけれど、それがないと人間社会は最終的には成立していかないんじゃないかという』<br><br><br>『子どもたちの人を好きになるという気持ちの動線が、健やかに育ってほしいと願っているんですよね』<br><br><br>『一番悲しいのは、人を愛せなくなることですから』<br><br><br>— by 演出家　塚原あゆ子<br><br><br><br><br><br><br><br><br><br><br><br></p>
</blockquote>
<p>ううぅ..<br><br>しばらくは余韻に浸りつつ、原作（漫画「中学聖日記」かわかみじゅんこ作　祥伝社）も読みつつ、劇中歌を聞きつつ歌いつつ。<br><br>私はドラマの中盤で主題歌のハマり具合（uruさんの曲作りあっぱれ）に気づいて、Chooningに感想投稿したりもしてました<br><br><img src="/image/chuugakuseinikki/chuugakuseinikki_yuuzn1.png" alt title="chuugakuseinikki_yuuzn1"><br><br><img src="/image/chuugakuseinikki/chuugakuseinikki_yuuzn2.png" alt title="chuugakuseinikki_yuuzn2"><br><br><br><br><br><br><br><br>しばらくは本作品から元気もらいつつ、<br><br>またこういう作品に出会いたい（創っていただきたい！）<br><br>という強い思いを胸にいきまするまる。<br></p>
<p>　</p>
]]></content>
        
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> poem </tag>
            
            <tag> favorite </tag>
            
            <tag> drama </tag>
            
            <tag> nature </tag>
            
            <tag> soundtrack </tag>
            
            <tag> love </tag>
            
            <tag> song </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[もやもやが少しハレた話]]></title>
        <url>https://yuuzn.github.io/2021/02/03/moyamoya_to_trust/</url>
        <content type="html"><![CDATA[<p>2021年2月3日(水)、ショッキングなニュースが舞い込んできた。メドレー代表のプライベートな報道だ。<br><br>医療×ITの先端を突き進むこれまでの大きな実績に、いちファンだった私はサイトをよくみていたっけ。<br><br>代表ご本人の発言も数々のメディアで目にしていたっけ。<br><br>そんな私だったのもあって、今回は非常に衝撃を受けた。<br><br>また知的な小川アナに好感を抱いていたのもあった。（照 <br><br><br><br>夕方にYahoo!ニュースでこの件を知って、<br><br>Yahoo!ニュースのコメント欄は、辛辣な、時に言い過ぎな意見も目に付いた。言い切りの断定口調はどうもすきじゃない。<br></p>
<p>その30分後くらいに、今度はNewsPicksの速報が来た。え、なんだろ、えええええ!!!って。<br><br>驚いたけど、平静を装っていつも通りにコメント欄を読んでみた。<br><br>ほとんどすべてのピッカーが、<br><br>「夫婦の問題だから、そっとしとけばいいのに。。」<br><br>Yahoo!ニュースのコメント欄ほど刺々してなく落ち着いた発言に、すこし気が和らいだ<br><br>うん、そうよね、第三者が口出すことではなく、奥さんが知ればいいことで、<br><br>さらには奥さんが最初に知りたいよね、、それで夫婦で話し合って問題をクリアにしていくことなのに、、、<br><br>週刊誌は何の立場で入り込むのだろう。<br><br>「夫婦の問題だから」<br><br>ってほとんどのピッカーは書いていて、うんうんそうだね。そうだよ、って思ってるんだけどなんかモヤモヤが残っていてココロの中がすっきりしない。うーん、なんだろう。ピッカーたちのコメントを読んでもなんか噛み切れないような、歯に何か詰まっている感覚。。。<br><br>そのときはそのくらいの感覚で自分でも何がつっかえてるか全然見当ついてなかった（すぐ他のことに関心が移っていた）<br><br><br><br><br><br><br><br><br><br><br><br>そのあと数時間後、自転車を漕いで家に向かっていたら、<br><br>あ、信頼　だ<br><br>そっか。<br><br><br><br><br><br><br><br><br><br><br></p>
<blockquote>
<p>家族という大切な存在に対して大きな嘘を平気でつけちゃう、そういう人に大事な案件を任せたいか？ </p>
</blockquote>
<br>

<p>う、ってなった。いちファンの私は何も言えない。<br><br>サービスが凄く好きだった故に、かなしくて。けど客観的に考えるなら、前述の問いか、と。<br><br><br><br>そっか、そういうことか。<br><br>夫婦の問題だけど、それで片づけられないような何か歯に詰まったような感覚はこれか、と。<br><br><br><br>家庭ってさ、自分の素を出せて心置きなく自然体で居られる温かい巣みたいだなぁって、私は思っていて。<br><br>そこですら嘘で塗り固めちゃうと、どこに安らぎがあったのかな。かなしくなった。<br><br><br><br>身近な人を大切にできない人が遠いクライアントのことを思いやれてるとは、私だったらできない。<br><br>信頼、って積み重ねだから、って痛いほど耳にしてるけど、<br><br>こういう滑り台に乗って下ってしまうのは、きっとどこかで思いやりが足りてなかったこと、これはあるのではないか、と思っちゃう。<br><br>仕事で見せる顔と家族に見せる顔は違うのかもしれないけど、<br><br>家族に偽りの仮面っていうのはなんだかさみしいなと思ってしまって。ただの小娘の感想です<br><br><br><br><br><br>彼は、会社やそこで働く人々そしてサービスを使っている関係者を守るため、代表取締役を辞任して、信頼回復に努めたいとすぐさま申し出をされた。<br><br>即座に対応され、すぐにその言葉がでたこと。<br><br>彼も気づかれたんだろう。突如消えた信頼について。<br><br>彼のその英断は、やっぱり日本の医療を変えていく者だったんだなぁって、<br><br>退く姿にも凄みを感じてしまって、だからこそ悔しくてやるせなくて、夫婦の問題だけじゃなくなっちゃった。<br><br><br><br>信頼。ね、ずっしりと。<br></p>
]]></content>
        
        <categories>
            
            <category> news </category>
            
        </categories>
        
        
        <tags>
            
            <tag> partner </tag>
            
            <tag> trust </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[瑛人のチェスト]]></title>
        <url>https://yuuzn.github.io/2021/01/24/eito_chest/</url>
        <content type="html"><![CDATA[<p>曲を聞いて心がじわっと動かされる感覚がひさびさだった<br><br>『香水』はギターの音色と言葉の響きがステキで<br><br>けと瑛人がギター弾いてないの知って弾いてそうなのに弾いてないのがなんともと思っちゃって、ギター弾いてくれてるの同級生だったってことも知って、えっ　もっと同級生も前に出そうよとか思っちゃったり売りだしかたはあくまで１人なんだと、なんか時折感じるビジネス臭に食わず嫌いしてたとこもあったとおもう<br><br><br><br>そんな私がこの曲でココロが動いた大きな変化が訪れた<br><br><br><br>瑛人の曲との出会いを振り返ると最初は「シンガーソングライターの彼女」って曲で、あぁギター心地いいぃ　こんな風に弾きたいないいなって思って。そのあと「香水」もいいかもって、人気とか知らずに素でおもってたかんじ<br><br><br><br>そしてそして1/7に「チェスト」をきいて、<br><br>こころをグッと掴まれた<br><br>瑛人のよさはこれだこれだ、多くの人に響く詩、飾らないありふれる気持ち、うまく言葉に表せなかったことをすーっと表現してくれる温かさ、楽器なくても心を動かせる曲作り、瑛人は「香水」止まりではないこと、知ってほしくなった<br><br>「チェスト」の歌詞とそこから自分が感じたことを描いていきたくなった<br><br><br><br><br><br><br></p>
<p>♪「チェスト」 / 瑛人<br>　 </p>
<blockquote>
<p>すっとかすれたようにしまる引き出し</p>
</blockquote>
<p>引き出しをしめるときってなんだか切ない</p>
<blockquote>
<p>すっと進められない僕のこの道<br>たまには戻りたいよ今も思い出すよ</p>
</blockquote>
<p>そこを通りたかった人がいることを想うともう戻れない</p>
<blockquote>
<p>手を繋ぎ歩いた頃の写真のあの笑顔</p>
</blockquote>
<p>守られて育ててもらえた絶対的な安心感に包まれていたあの頃</p>
<blockquote>
<p>あっとゆうまにすぎてく心の時間</p>
</blockquote>
<p>毎日早すぎるけど家にひとりでいると長くてさ</p>
<blockquote>
<p>ハッと気づいた時にはもう遅いかも</p>
</blockquote>
<p>気づく感度を上げつつ</p>
<blockquote>
<p>ついてないことばかり後ろ振り向いちゃうよ</p>
</blockquote>
<p>ついてないことなんて結局ないきもして どれも意味があるから</p>
<p>前をみてるけどたまに後ろを振り返ろうって</p>
<blockquote>
<p>うちの犬のトモも冴えない顔してる</p>
</blockquote>
<p>犬って色々気づいてる</p>
<br> 

<blockquote>
<p>頭の中が難しくて　いつものように笑えない日もある</p>
</blockquote>
<p>考えすぎじゃない？って言ってくれたこと、忘れないよ<br><br>鏡の前で笑ってみよう笑えちゃうから</p>
<blockquote>
<p>そんなときは思い出して　支えてくれた人を</p>
</blockquote>
<p>周りの人のこと思い浮かべるとあったかい気持ちになる、それでいい</p>
<br> 

<blockquote>
<p>今の自分を終わらせないで</p>
</blockquote>
<p>自分の人生で唯一自分が決められないことは人生を終わりにすること</p>
<blockquote>
<p>いつか輝ける日がくるから</p>
</blockquote>
<p>輝くには磨くこと　磨けばゼッタイ綺麗に光るよ</p>
<blockquote>
<p>だれかと比べ悲しまないで</p>
</blockquote>
<p>マウントし合ったてなにも残らないよ</p>
<blockquote>
<p>君の引き出しは君が開けるもの</p>
</blockquote>
<p>引き出しをしまうときはゆっくり　開けるときは勢いよく　ってね</p>
<br>

<blockquote>
<p>きっとダメだろうってしまう時もある<br>きっとこのまま進んでいくの</p>
</blockquote>
<p>そっと置いておくことも大切で</p>
<blockquote>
<p>どっちつかずの毎日くり返し生きる</p>
</blockquote>
<p>白黒なことってスポーツの勝ち負けくらいなんじゃないかな</p>
<blockquote>
<p>どっちでもいいんじゃない君が幸せなら</p>
</blockquote>
<p>どっちだっていいけど貴方の好みがききたい</p>
<br>

<blockquote>
<p>ずっと同じところに置いたものは<br>ずっと同じところにあるものさ</p>
</blockquote>
<p>そこに置くって決めたのはあなたがそう選んだから</p>
<blockquote>
<p>小さい頃の夢はなんだか覚えてる？</p>
</blockquote>
<p>小さい頃のDreamと今のVISION</p>
<blockquote>
<p>カブトムシって言ってた</p>
</blockquote>
<p>カブトムシより蝉の脱け殻を見つけるのがすきだったよ</p>
<blockquote>
<p>それが君らしいよ</p>
</blockquote>
<br>

<blockquote>
<p>出会いと別れが急すぎて</p>
</blockquote>
<p>マッチングアプリとコロナの自殺<br><br>速いってレベルじゃなくて突然、急</p>
<blockquote>
<p>ほんとうかわからない時もある</p>
</blockquote>
<p>ほんとかどうか追いかけるより捉え方でいいんじゃないかな　自分で納得しよう</p>
<blockquote>
<p>そんな時はただひたすら</p>
</blockquote>
<p>つらいときは鏡の前で笑ってみて　可笑しくて笑っちゃうから</p>
<blockquote>
<p>笑っていればいいよ</p>
</blockquote>
<p>笑ってごまかすのも正義だよなんて</p>
<br>

<blockquote>
<p>今の自分を終わらせないで</p>
</blockquote>
<p>自分の人生で唯一自分が決められないことは人生を終わりにすること</p>
<blockquote>
<p>いつか輝ける日がくるから</p>
</blockquote>
<p>磨いてるあなたはほら、もう光ってる</p>
<blockquote>
<p>だれかのせいなんて言わないで</p>
</blockquote>
<p>ぜんぶコロナのせいなんて言えるほど世界は甘くない</p>
<blockquote>
<p>君を開けるのは君しかいない</p>
</blockquote>
<p>自分を信じて進むしかないんだ</p>
<br>

<blockquote>
<p>張り裂ける胸おさえてまで</p>
</blockquote>
<p>膨らんだ気持ちを無理に押し込めないでね</p>
<blockquote>
<p>偽りの自分じゃ意味がないから</p>
</blockquote>
<p>素直でいると自分がいきいきするよ</p>
<blockquote>
<p>ただあなたのためだけに</p>
</blockquote>
<p>さいごは愛よね</p>
<blockquote>
<p>僕は歌うよ</p>
</blockquote>
<br>

<blockquote>
<p>今の自分を諦めないで</p>
</blockquote>
<p>諦めるってことは期待がある　今だっていいじゃん　期待はすこし横に置いておこう</p>
<blockquote>
<p>生きてるだけで素晴らしいんだよ</p>
</blockquote>
<p>ほら、美味しいもの一緒に食べよう</p>
<blockquote>
<p>あなたのせいで幸せですと</p>
</blockquote>
<p>あなたのお陰で幸せってほど間接的じゃなくてもっともっと貴方のせいなんだよこの幸せは</p>
<blockquote>
<p>いつか言われるそんな日がくるまで</p>
</blockquote>
<p>♪<br><a href="https://www.youtube.com/watch?v=C7eNeyopfMw" target="_blank" rel="noopener">瑛人「チェスト」</a><br><br></p>
<br>

<p>何度聴いても泣ける気持ちになれるくらいに世界に浸れて優しい心に触れる。自分も優しくなれたと錯覚しちゃう魔法みたいな包み込んでくれるすっごい歌<br><br>今後の曲作りもたのしみです<br></p>
<p>最近はもっぱらチル系の曲でrelaxってことがおおかったけと1曲をじっくり味わうよさをおもいだせました。<br><br>創られた時間以上に味わえる歌と思います。おすすめ!</p>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> poem </tag>
            
            <tag> favorite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[ヒヤリハット体験を見過ごしてないでしょうか]]></title>
        <url>https://yuuzn.github.io/2021/01/08/hiyari_hat/</url>
        <content type="html"><![CDATA[<p>某製薬企業さまの製品自主回収が話題となっておりましたが、<br>そこで知ったのが『ハインリッヒの法則』です。</p>
<p>(事象自体は知ってて、名前があることに年末知りました！Yahoo!ニュースのコメント読んでてよかった（笑） </p>
<br>
大学院で化学実験に明け暮れていた頃、先輩に、 

<blockquote>
<p>『大事故のまえには必ずといっていいほど、小事故が起きてるんだよ。だから、今日ミス多いなとか、なんか上手くいかないやってとき、今日は実験は止める。くらいでいたほうがいい。』 </p>
</blockquote>
<p>と教えてもらいました。 </p>
<br>
それ以降、自身のミスや調子を意識的にモニタリングするように過ごしてきました。疲れ感じだしたら早めに休んどくとか。 予防医療も流行ってますし。 

<p>で、これは日頃の仕事にも通じるところがあるなと改めて痛感。<br>今日注意散漫だなとか、ここの記述見過ごしてたとか、連続で起きたときは、自身に黄色信号をだすようにしています。ソースコードも余計なピリオドひとつでいのちとりですから。 結構神経つかう仕事ですし。 </p>
<br>
自身のミスには比較的気づけるようになってきたので、次はパフォーマンスをいかにキープするか、自分でもっとコントロールできるようになりたい、最近の課題です。 

<p>言いたかったのは、<br>なにかと慌ただしい時期かもしれませんが、ヒヤリハット体験をスルーせず、あらためてお気をつけてくださいませ（自戒を込めて<br><br><br>ということでした！</p>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> consideration </tag>
            
            <tag> advise </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[いまさら聞けないAPサーバ]]></title>
        <url>https://yuuzn.github.io/2020/12/24/kikenaiAPserver/</url>
        <content type="html"><![CDATA[<p>おひさしぶりです、AdventCalnderも残すところあと僅か！ラストのまえにサクッと最近スッキリした話を。<br>Webサーバが何をしているか基本的なことは知っていました。</p>
<ul>
<li>クライアント側から受取ったリクエストから、データを探し、レスポンスとしてHTMLや画像を返す</li>
</ul>
<p>ではAPサーバは？<br>って聞かれると一瞬詰まります。。アプリケーションの実行結果を返してるんだろうけど、<br>サーバ構成で、APサーバとDBサーバしか載ってない構成もチラホラみてたので、、、<br>WebサーバとAPサーバのちがいや使い分けって？？と少しざわざわしました。</p>
<p>つまるところ、<br>APサーバは、Webサーバからの要求に対して、アプリケーションの実行結果（動的コンテンツ）をWebサーバ返している！のでした。</p>
<p>次にサーバ構成でWebサーバだけとか、APサーバだけとか、見たことある。そのあたりはいかに？（使い分けの話</p>
<ul>
<li>静的コンテンツであればWebサーバだけでいい</li>
<li>動的コンテンツであればAPサーバ必要</li>
<li>APサーバ単独で使うケースはほぼなし（アプリケーションを実行する機能なので）</li>
<li>Webサーバ機能を備えているAPサーバもある（Tomcatなど。あくまで補助的なもの）</li>
<li>PHPの場合はAPサーバを使う必要ないらしい（Apache（Webサーバ）の機能を使うことでAPサーバのような仕組みを導入できる）<br>ふむふむ。使い分けてみよう。</li>
</ul>
<p>続きまして、<br>クライアントサーバシステムの「サーバ」部分を3階層（Webサーバ、APサーバ、DBサーバ）に分割したのが3層アーキテクチャと。よく聞きますよね！<br>または、Webサーバ、APサーバ、DBサーバのうち、APサーバを、プレゼンテーション層・ビジネスロジック層・データアクセス層に、プログラムの構造を分けることを「3層アーキテクチャ」と指す場合もあるとか。<br>ちなみに、いわゆるMVCは、プレゼンテーション層にControllerとViewがあり、ビジネスロジック層にModelがある。<br>なので、アプリケーションの構成を検討するときに、「MVC を採用する」というだけでなく、「全体のサーバ構成は3 層で、プログラム構成はMVC にする」というのが親切だそうな。</p>
<p>この辺りを整理していたらだいぶスッキリしてきました！よい年越しを迎えられそうです（え<br>というお話。まる。（ド基礎ですみません</p>
<p>わかったつもりのこわさと、自身の説明時に不親切だったことを痛感。。<br>すっかり寒いですが、温かくすごしてください。楽しいクリスマスを！</p>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[APIを使って『名言』をスマホに表示してみた]]></title>
        <url>https://yuuzn.github.io/2020/12/07/meigenAPIdisplay/</url>
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>いま作っているAndroidアプリで、ユーザが毎日アプリを開いてくれるにはどうしたらいいかな.. と考えた結果、</p>
<ul>
<li>ユーザにとって有益な情報が載っている</li>
<li>毎日内容が更新される</li>
<li>癒される</li>
</ul>
<p>これらが最低限必要だなと思いました。<br>これらを満たす仕様はなんだろう？<br>自分だったら何が載っていたらアプリみる？？<br>っってことで、考えた末行きついたのが、『名言ティッカー』！！です。名言が流れてきます。（予定）</p>
<h2 id="設計"><a href="#設計" class="headerlink" title="設計"></a>設計</h2><p>名言をデータベースにぶちこむのは、ナンセンスかな&amp;著作権問題もありますし&amp;中身の自動更新が理想ですし..<br><a href="http://www.meigensyu.com/quotations/view/2647.html" target="_blank" rel="noopener">http://www.meigensyu.com/quotations/view/2647.html</a><br>また、↑↑こういう名言サイトからスクレイピングするのもできることではありますが、承諾など必要なため、あとあと大きく使いたい時に大変になる。<br>というところから、<br>フリーで使えるAPIを探し、それを取り込むことにしました。</p>
<p>私が採用した名言API<br>↓<br>Rakuten Rapid APIの『Random Famous Quotes』です<br><a href="https://api.rakuten.net/andruxnet/api/random-famous-quotes/endpoints" target="_blank" rel="noopener">https://api.rakuten.net/andruxnet/api/random-famous-quotes/endpoints</a></p>
<h2 id="実装ポイント（私がハマったところ）"><a href="#実装ポイント（私がハマったところ）" class="headerlink" title="実装ポイント（私がハマったところ）"></a>実装ポイント（私がハマったところ）</h2><ol>
<li><p>APIの登録お忘れなく<br>ソースコードを書き終えたと思ったのに、名言を取得できない！なんで？？と数時間あーだこーだ悩んだ挙句、<br>Rakuten Rapid APIの画面で、「その名言を使用するよ」と登録的なのをしなきゃいけなかった。時間無駄にした感半端ないので皆さんお気を付けを。（アカウント登録の後、各APIの登録を）</p>
</li>
<li><p>HTTP通信方法の選択<br>AndroidでHTTP通信したい時のやり方は数種類ある<br><a href="https://qiita.com/riversun/items/5f78d47a3d95f857d34f" target="_blank" rel="noopener">https://qiita.com/riversun/items/5f78d47a3d95f857d34f</a>  </p>
</li>
</ol>
<ul>
<li>HttpUrlConnection  </li>
<li>OkHttp3<br>など<br>最近人気らしい、OkHttp3でやろうとしたが、私はうまくいかなかったため、HttpUrlConnectionにしました（古典的</li>
</ul>
<ol start="3">
<li>そして非同期処理するならAsyncTaskを使おう<br><a href="https://qiita.com/watataku8911/items/a34ff1f5927c0b32f0ab" target="_blank" rel="noopener">https://qiita.com/watataku8911/items/a34ff1f5927c0b32f0ab</a>  </li>
</ol>
<ol start="4">
<li><p>URLどこで分割するか問題<br>あとはURLを分割してセットしていく所も地味にハマりました<br>アクセスしたいURL：『<a href="https://andruxnet-random-famous-quotes.p.rapidapi.com/?cat=famous&amp;count=1" target="_blank" rel="noopener">https://andruxnet-random-famous-quotes.p.rapidapi.com/?cat=famous&amp;count=1</a> 』</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String API_URL_PREFIX = <span class="string">"andruxnet-random-famous-quotes.p.rapidapi.com"</span>;</span><br><span class="line">HttpURLConnection con = <span class="keyword">null</span>;</span><br><span class="line">Uri.Builder uriBuilder = <span class="keyword">new</span> Uri.Builder();</span><br><span class="line">uriBuilder.scheme(<span class="string">"https"</span>);</span><br><span class="line">uriBuilder.authority(API_URL_PREFIX);</span><br><span class="line">uriBuilder.path(<span class="string">"/"</span>);</span><br><span class="line">uriBuilder.appendQueryParameter(<span class="string">"cat"</span>,<span class="string">"famous"</span>);</span><br><span class="line">uriBuilder.appendQueryParameter(<span class="string">"count"</span>,<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">final</span> String uriStr = uriBuilder.build().toString();</span><br></pre></td></tr></table></figure>
</li>
<li><p>APIのパスワードなど<br>API使用時のパスワードなど追記してあげてね</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(uriStr);</span><br><span class="line">con = (HttpURLConnection) url.openConnection();</span><br><span class="line">con.setRequestProperty(<span class="string">"x-rapidapi-host"</span>, <span class="string">"andruxnet-random-famous-quotes.p.rapidapi.com"</span>);</span><br><span class="line">con.setRequestProperty(<span class="string">"x-rapidapi-key"</span>, <span class="string">"ぱすわーど"</span>);</span><br><span class="line">con.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">con.setDoInput(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON→文字列取得<br>あとはJSONで返ってきたものを、文字列に落とし込むところとかかな</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSONArray array = <span class="keyword">new</span> JSONArray(result);</span><br><span class="line">JSONObject json = array.getJSONObject(<span class="number">0</span>);</span><br><span class="line">String message = json.getString(<span class="string">"quote"</span>);</span><br><span class="line">String author = json.getString(<span class="string">"author"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>うっかり記載漏れ注意<br>AndoroidManifest.xmlにインターネットアクセス許可書くのお忘れなく！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h2><p>いまは英語の名言が表示されるのみなので、<br>あいだにGoogle翻訳などかませて、<br>日本語化したい。（日本語の名言APIは未だ無さそうだったので致し方ない）<br>そして現在苦戦している動き、『名言が流れてくる～』機能ですね。その名も『名言ティッカー』！！<br>今はアプリ起動→初回名言表示→ボタン押下で名言更新→別の名言表示って流れですが、<br>横から名言が流れてくるように、がんばります<br>あ、アプリ実物見たいかた、私までお声かけを～<br>ではではこの辺で。HappyBirthday★  </p>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[Androidアプリ開発いいよって話]]></title>
        <url>https://yuuzn.github.io/2020/12/04/AndroidAppDev-greatest/</url>
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>花形に感じていたWebアプリ開発から、つい手を付け始めた私ですが、<br>最近、Androidアプリ開発まじでいいな。と思っております。こんばんわ。<br>自身の性格もあると思うのですが、冗長がなく、スマートですきですね。学習コスト的な面でもコスパいいし。<br>初心者でも、結構動くもの&amp;それなりにお洒落&amp;個性だしやすい&amp;すぐ使える身近感　のあるアプリを作れます。<br>私なりにメリット/デメリットを並べてみました。</p>
<h2 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h2><ul>
<li>ソースコードがそのまま動いてる感覚をもてる（←処理モジュールとデザイン側モジュールがシンプルな構成のため</li>
<li>少量の記述で済む（⇔たくさん書いたのに出来上がったものが簡易&amp;地味.. だったWebアプリと違う</li>
<li>教科書的なベーシックなJavaの記述でよい（←ライブラリー依存の癖が少なそう</li>
<li>デザインに時間をさける&amp;デザイン実装速度が速い（←ドラッグでソースコード書いてくれたり、マテリアルデザイン活用も</li>
<li>作ったアプリを手元のスマホですぐテストできる（環境構築もラク～～</li>
<li>コスパ良い（少ないコード記述で、スマートに動く）</li>
<li>最低限のお作法を勉強したら、あとは好きに使える、自分の右腕になるよっ</li>
<li>AndroidStudioが優秀（←まぁこの一言に尽きるよね、モジュール構成も神。</li>
</ul>
<h2 id="デメリット"><a href="#デメリット" class="headerlink" title="デメリット"></a>デメリット</h2><ul>
<li>バックエンド側のこととかあんまり意識しなくなりがち？</li>
<li>DBMSの選択肢すくなげ</li>
<li>データベース構築慣れるまで大変っ（←いまだよくわかんないとこもある。スマホの中で何起きてんのとか</li>
<li>AndroidStudioのエミュレーターは重い（ので、実機に繋いでコード書いてます</li>
</ul>
<h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>結局、自身がどこに時間割きたいか？ですよね（笑）<br>私の場合、うらっかわのとこは脳トレ的な面白さはありますが、自己満に陥りやすい、ので、<br>表側の、ユーザが見るところ、使いやすいか、そもそもこのアプリの意義は？問題解決できてる？？<br>などを考えるところに重きを置いていたい。<br>結果的にAndroidアプリ開発は自分にぴったりと思えました。ひとそれぞれです。</p>
<h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>ネイティブアプリやり始めるなら両OS対応のFlutterで。というのももちろん必要と思います。<br>が、AndroidStudioのアップデートがFlutterに反映されるのにラグが有ったり、<br>その他、開発初心者には少々学習のハードル上がる.. などあるため、<br>とっかかりとしてAndroidStudioで始めることはいいかもなと。<br>また、かなり凝ったアプリにした場合、Flutterでは再現難しく、結局個々のOS依存で書くところはある、というお声も。<br>開発初心者が始める、つまずきにくくする、のであれば、AndroidStudioからがよいのではと！<br>教材もおおいですし</p>
<h2 id="よって"><a href="#よって" class="headerlink" title="よって"></a>よって</h2><p>Java学習ロードマップに落とし込むなら、<br>Androidアプリ開発は、SpringBootでのWebアプリ開発より、先にやって平気な内容、むしろJavaの構文理解したら、<br>アウトプットとして、すぐ簡易スマホアプリを作ってみることをおすすめしたい。<br>じぶんのスマホにMyAppがある喜びをぜひ体験して欲しい..!!<br>ま、ある程度出来上がってきたら、、私もFlutter始めるところではあります。</p>
<p>それではよい12月を！2020年もあと残り28日（残7.7%だって）☆<br><img src="/image/AndroidAppDev-greatest/AndroidDevLove.png" alt title="AndroidDev_love"></p>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[社会人2年目の振り返り～その１～]]></title>
        <url>https://yuuzn.github.io/2020/03/20/second_year_of_working_life/</url>
        <content type="html"><![CDATA[<h1 id="社会人2年目の振り返り～その１～"><a href="#社会人2年目の振り返り～その１～" class="headerlink" title="社会人2年目の振り返り～その１～"></a>社会人2年目の振り返り～その１～</h1><h2 id="まえおき"><a href="#まえおき" class="headerlink" title="まえおき"></a>まえおき</h2><p>同期と、あと一週間ちょっと仕事したら社会人3年目になるね&gt;&lt;ってLineしてて、不安だ不安だ、このくらいできたらクリア！みたいな指標ほしいよねって話してて、あ、ならこれができたらLevel.2とか良くない？みたいな話になって、い～ね～、そしたらJava開発ロードマップとかからレベル分けしてみるか！ゲーム作ろう(笑)とジョークぶち込んでみたりして、そしたら、まずは、『この1年でできるようになったことを書き出す』といいかもってなって、やってみた、次第でございます。（長い</p>
<h2 id="できるようになったこと"><a href="#できるようになったこと" class="headerlink" title="できるようになったこと"></a>できるようになったこと</h2><ul>
<li>春に応用情報技術者試験に突破したこと</li>
<li>PJのPHPフレームワークの理解が進んだこと</li>
<li>SpringBootで簡易なCRUDアプリを作成すること</li>
<li>長い１つのクエリを理解すること</li>
<li>クエリを設計すること</li>
<li>テスト項目を洗い出せること</li>
<li>日本語文章力がましになったこと</li>
<li>日々気持ちの良い報・連・相を心掛けること</li>
<li>思考を深めること</li>
<li>時間ログをつけること</li>
<li>1日を逆算して行動すること</li>
<li>7人以内の人の前で話すこと</li>
<li>日々無理のない自炊継続</li>
<li>嫌なことがあっても気持ちを切り替えられること</li>
<li>全体主義で考えて行動すること</li>
<li>みんなの幸せを考えること</li>
<li>広報活動</li>
<li>シャイなので元来目立ちたくないが、人前に立つこと</li>
<li>１つの意見を即信じ込まずに物事を多方向から見ること</li>
<li>ギターでコードを鳴らすこと</li>
<li>会いたい人に会う生活</li>
<li>一瞬の恥を気にしないでいられること</li>
<li>言わないほうがいいことを言わずにいられること</li>
<li>気持ちをストレートに出さないこと</li>
<li>色んなスタンスの人がいることを理解すること</li>
<li>財政管理の記録を見直すこと</li>
<li>頭の中で次はこうしようと反省会すること</li>
<li>早起き生活を再開すること</li>
<li>同期と更に親交を深めること</li>
<li>ノート（手元に残したいメモ）とホワイトボード（その場の思考整理）を使い分けられるようになったこと</li>
<li>時間を忘れるほど夢中になれる趣味が見つかったこと</li>
<li>本の著者のイベントに参加すること</li>
<li>社外のJava系セミナーに参加すること</li>
</ul>
<h2 id="できるようになりたいこと"><a href="#できるようになりたいこと" class="headerlink" title="できるようになりたいこと"></a>できるようになりたいこと</h2><ul>
<li>英語で話すこと</li>
<li>英語の記事を読んで正確に理解できること</li>
<li>考えてから話すこと</li>
<li>焦らないこと</li>
<li>高速タイピング</li>
<li>ブラインドタッチ</li>
<li>毎日日記をつけること</li>
<li>依存しないこと</li>
<li>アウトプットを増やす</li>
<li>しなやかになめらかに話すこと</li>
<li>とうとうと勢いで話さずに穏やかにゆっくり話すこと</li>
<li>お客さんの前でも動揺しないこと</li>
<li>利益がどうやったら増えるか考えること</li>
<li>自己反省会を頭の中だけでやらずに書き出すこと</li>
<li>目を見て話すこと</li>
<li>姿勢をよくすること</li>
<li>身体を柔らかくすること</li>
<li>冬でも太らないこと</li>
<li>持ち物をシンプルにすること</li>
<li>ショートカットキーを使いこなすこと</li>
<li>毎月月末に自分反省会をすること</li>
<li>長期的な到着地点を設定しておくこと</li>
<li>映画やドラマなどをたまには見て参考にすること</li>
<li>上手くいった時の記録も残すこと</li>
<li>資格勉強習慣を再構築すること</li>
<li>クリエイティブなことに時間を多くさけるように定常作業を素早く終える処理能力を高めること</li>
<li>毎日本を少しでも読むこと</li>
</ul>
]]></content>
        
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> consideration </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20200126]]></title>
        <url>https://yuuzn.github.io/2020/01/26/guitar-20200126/</url>
        <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>メトロノームを使って流しながら練習するとよい</li>
<li>曲に入る前に心の中で121234とカウントする（ダブルカウント）</li>
<li>タップで速さを設定できるメトロノームアプリが便利</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>親指固定忘れずに</li>
<li>親指を固定した状態で他の指を立てるか斜めにするかはコードに寄りけり</li>
<li>親指は基本ミュートに使う。Emなどあえて6弦を鳴らしたいときは親指の先端だけ浮かせる</li>
<li>1フレットで押さえる指は2フレット寄りでよい。わざわざ遠い位置や幅広くしないでよい</li>
<li>Cは5弦から押さえようね。基本低い音から押さえる。なぜならダウンストロークで低い音から弾くから</li>
<li>制覇の移動は人差し指で制覇を押さえたまま移動する。離さないように</li>
<li>制覇の練習は人差し指と薬指をまず押さえられるようにすること。フレームを作るてきな。できるようになったら中指を付け足す。</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20200119]]></title>
        <url>https://yuuzn.github.io/2020/01/19/guitar-20200119/</url>
        <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>アップストロークでもちゃんと手首使う、そのまま上に触って上げるだけはだめ</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>制覇の練習は、おもに下記２種 <ul>
<li>流れで弾けるようにする練習 </li>
<li>1弦1弦押さえられているか音を確認して部分的に繰り返したり着地の練習 </li>
</ul>
</li>
<li>制覇で移動するときは弦を触りながら移動するとよい（弦から手を離すと離すときにも音が鳴るので触りながら移動</li>
</ul>
<h3 id="弦種類"><a href="#弦種類" class="headerlink" title="弦種類"></a>弦種類</h3><ul>
<li>細いほうが最初は押さえやすい</li>
<li>エクストラライト　1弦が0.10</li>
<li>フォスファブロンズのほうがブロンズよりキラキラした音</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20200112]]></title>
        <url>https://yuuzn.github.io/2020/01/12/guitar-20200112/</url>
        <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>左手に連れられて右手を止めたり待ったりしない</li>
<li>右腕は肘を支点にする</li>
<li>サウンドホールの穴より左側で弾くと柔らかい音になり右側に行くほど固い音となる</li>
<li>振動を感じるくらい音を出す</li>
<li>16部音符のリズムも掴めるようにパターン練習する</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>制覇の音（バレーコード）は人差し指と薬指のセットの手の形は基本的に同じ</li>
<li>セットの形のままスライドさせて移動すること</li>
<li>制覇が来たら親指を素早く下げること</li>
</ul>
<h3 id="練習メニュー"><a href="#練習メニュー" class="headerlink" title="練習メニュー"></a>練習メニュー</h3><ul>
<li>部分練習を増やす</li>
<li>右手練をするときは左手コードは簡単でよい</li>
<li>左手コード練では右手の振りは4分音符など簡単でよい</li>
</ul>
<h3 id="コード表記"><a href="#コード表記" class="headerlink" title="コード表記"></a>コード表記</h3><ul>
<li>△、M、majはどれも同じ</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[コンストラクタとthisの話]]></title>
        <url>https://yuuzn.github.io/2019/12/24/constructor-this/</url>
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>前回に引き続きJavaです。今回は、かつて初見で自分がくじけた箇所、理解に時間がかかった箇所、そう、<code>コンストラクタ</code>と<code>this</code>についてまとめたいと思います。</p>
<h2 id="コンストラクタとは？"><a href="#コンストラクタとは？" class="headerlink" title="コンストラクタとは？"></a>コンストラクタとは？</h2><p>new演算子で作成した直後のオブジェクトのフィールドには、意味のある具体的な値ではなく、nullや0などが入っています。<br>コンストラクタを作成するとオブジェクト作成時に特定の値をフィールドにセットできるようになります。<br>コンストラクタは「構築者」という意味であるのも然り。<br>new演算子がオブジェクトを作成した直後、コンストラクタが起動して、オブジェクトに具体的な初期値をセットするのです。<br>コンストラクタはメソッドと似ていますが、メソッドではありません。名前はクラス名と同じで、戻り値型の指定もないのです。</p>
<h2 id="thisってなに？"><a href="#thisってなに？" class="headerlink" title="thisってなに？"></a>thisってなに？</h2><p>thisはオブジェクト自身の参照なのですが、これはthisの働きを知ったほうが理解が早いです。次の次を読んでね</p>
<h2 id="コンストラクタの役割"><a href="#コンストラクタの役割" class="headerlink" title="コンストラクタの役割"></a>コンストラクタの役割</h2><ul>
<li>オブジェクトの初期化を行う(≒フィールドに適当な値をセットすること)</li>
<li>オブジェクトを作成するのはnew演算子の働きで、それを適切に初期化するのがコンストラクタの役割</li>
</ul>
<h2 id="thisの役割"><a href="#thisの役割" class="headerlink" title="thisの役割"></a>thisの役割</h2><ul>
<li>「これ(this)がフィールドです」とコンパイラに教える働き<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Product</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String code;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(code, price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>※引数の名前がフィールド変数と異なるときはthisは不要</p>
<ul>
<li>thisはコンストラクタに限らず、メソッドの中でも、フィールド変数と同じ名前の変数があって区別しなければならないときには、this.○○という形で使う</li>
</ul>
<h2 id="コンストラクタの書き方、使い方"><a href="#コンストラクタの書き方、使い方" class="headerlink" title="コンストラクタの書き方、使い方"></a>コンストラクタの書き方、使い方</h2><ul>
<li>new演算子とセットで用いる</li>
<li>コンストラクタの定義の中ではreturn文以外ならどんな命令文でも書くことができる</li>
<li>自前でコンストラクタの定義を書いた場合は、引数なしのコンストラクタ(デフォルトコンストラクタ)は呼び出せなくなる(←デフォルトコンストラクタが自動作成されないため呼び出してもコンパイルエラー)</li>
</ul>
<h2 id="thisの使い方"><a href="#thisの使い方" class="headerlink" title="thisの使い方"></a>thisの使い方</h2><ul>
<li>this.[メンバ名]という形で使用</li>
<li>return this; のように参照として単体でも使用可能</li>
<li>コンストラクタやインスタンスメソッドなどの中で使用可能</li>
<li>クラスメソッドの中で使用するとコンパイルエラーになる(ex. mainのようなクラスメソッドの中ではthisは使用不可)(←クラスメソッドはオブジェクトではないのでthisの値がわからないため)</li>
</ul>
<h2 id="コンストラクタのポイント"><a href="#コンストラクタのポイント" class="headerlink" title="コンストラクタのポイント"></a>コンストラクタのポイント</h2><ul>
<li>オブジェクトの初期化を行う</li>
<li>new演算子がオブジェクトを作成した後に必ず呼び出される</li>
<li>クラスと同じ名前を持つ</li>
<li>戻り値がない(voidも書かない)</li>
<li>コンストラクタはオブジェクトに取り込まれない(≒コンストラクタの実体はクラスファイルの中にある)</li>
<li>コンストラクタが定義されてない時のみ、デフォルトコンストラクタが暗黙の内に作成される</li>
<li>デフォルトコンストラクタは常に引数がない</li>
<li>コンストラクタを作成するとデフォルトコンストラクタは作成されなくなる</li>
<li>コンストラクタはオーバーロード(多重定義)できる</li>
</ul>
<h2 id="thisのポイント"><a href="#thisのポイント" class="headerlink" title="thisのポイント"></a>thisのポイント</h2><ul>
<li>thisはオブジェクト自身の参照である</li>
<li>すべてのオブジェクトがthisを持つ</li>
</ul>
<h2 id="コンストラクタのちょっと細かい話"><a href="#コンストラクタのちょっと細かい話" class="headerlink" title="コンストラクタのちょっと細かい話"></a>コンストラクタのちょっと細かい話</h2><ul>
<li>コンストラクタと同名のメソッドを作れる(←メソッド名の前に戻り値型を書いたとき)</li>
<li>コンストラクタはクラス名と完全に同じでなければならない(←小文字と大文字も区別される)</li>
<li>コンストラクタを複数定義することをコンストラクタのオーバーロード(多重定義)という</li>
<li>引数の構成(型の種類、個数、並び順、のいずれか)が異なれば、コンストラクタを幾つでも作成可能<br>※引数の名前を異なるようにしただけではオーバーロードにはならない<br>※アクセス修飾子を異なるようにしただけではオーバーロードにならない</li>
</ul>
<h3 id="デフォルトコンストラクタ"><a href="#デフォルトコンストラクタ" class="headerlink" title="デフォルトコンストラクタ"></a>デフォルトコンストラクタ</h3><ul>
<li><p>見ることはできないが実体は以下のようなもの</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>デフォルトコンストラクタはコンパイラが作成する見えないコンストラクタである</p>
</li>
<li><p>コンパイラが作成しclassファイル(実行可能なJavaバイトコードのファイル)に挿入される</p>
</li>
<li><p>デフォルトコンストラクタのアクセス修飾子はクラスと同じになる</p>
</li>
</ul>
<h2 id="thisのちょっと細かい話"><a href="#thisのちょっと細かい話" class="headerlink" title="thisのちょっと細かい話"></a>thisのちょっと細かい話</h2><ul>
<li>見えないところでコンパイラは全てのフィールド変数にthisを付けている</li>
<li>プログラマがthisを付けるのはコンパイラの作業を助けるため</li>
<li>thisは実行時にはオブジェクトの参照に置き換えられる</li>
<li>this()によってコンストラクタを呼び出せる</li>
</ul>
<h3 id="this-の紹介"><a href="#this-の紹介" class="headerlink" title="this()の紹介"></a>this()の紹介</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String santaClausName;</span><br><span class="line">    String presentCode;</span><br><span class="line">    <span class="keyword">int</span> cakeCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = santaClausName;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝ presentCode;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode, <span class="keyword">int</span> cakeCount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = santaClausName;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝ presentCode;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = cakeCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上記のコードは見てわかる通り繰り返しが多いです。this()を使ってコードを簡易化してみましょう。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String santaClausName;</span><br><span class="line">    String presentCode;</span><br><span class="line">    <span class="keyword">int</span> cakeCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">""</span>, <span class="string">""</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(santaClausName, presentCode, <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode, <span class="keyword">int</span> cakeCount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = santaClausName;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝ presentCode;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = cakeCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>this()はコンストラクタが他のコンストラクタを呼び出す書き方</li>
<li>this()には注意が2点ある <ul>
<li>this()はコンストラクタの最初の行に書かなければならない</li>
<li>this()はメソッドでは使えない</li>
</ul>
</li>
</ul>
<h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>こうしてまとめてみると、案外ひっかからずにすんなり読めそうな内容ですね。かつて言語の勉強を始めたばかりの頃の私は大いにつまずきました(笑)。かつての自分に言ってあげたい。ひとつひとつ調べて理解しようね、と。わからないことが複数になると何がわからないのかもわからなくなって迷走するのでね、と。<br>おっと、言い忘れそうなのでこの辺で。メリークリスマスイブ☆彡<br><img src="/image/constructor-this/penguin_love.png" alt title="penguin_love"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote>
<ul>
<li>「わかりやすいJava オブジェクト指向編　/ 川場隆　(秀和システム)」  </li>
<li>「優しく学ぶ　Javaプログラマ　/　山本道子　（翔泳社）」</li>
</ul>
</blockquote>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[私のJava開発学習ロードマップ]]></title>
        <url>https://yuuzn.github.io/2019/12/20/java-study-step/</url>
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Javaの勉強法（現在進行中）をいつかまとめたいな..と思っていたので、社内のAdventCalendarを契機にしてこの度重い腰をあげてまとめてみることにしました。そんな決意をした数日後にSpringFestに参加したのですが、そこでまさにjust fitなセミナーがあったため、その内容も紹介しつつ書いていきたいと思います。</p>
<h2 id="なんでJava"><a href="#なんでJava" class="headerlink" title="なんでJava?"></a>なんでJava?</h2><p>基幹系のシステムに強いなどJavaを使うメリットは沢山あると思います。私の中では、記述がめんどくさい（≒丁寧に書く習慣が身に付く）、本や勉強度合いの目安になる試験が多い（≒言語を理解する勉強材料として最適）、大変なもの重めのもの迷ったら難しいほうをやる（≒他の言語に移るときに楽と思えそう）、という理由があって続けております。</p>
<h2 id="なにからどこまで"><a href="#なにからどこまで" class="headerlink" title="なにからどこまで"></a>なにからどこまで</h2><p>私はラフティング型でJavaの勉強を積上げてきたので（長期的なゴールを意識していない）先のことはあまり考えずに目の前で一生懸命系でした。そんなとき、前述のSpringFestのセミナーにより、今いる地点を知れたり、今後の指針が見えたりして、これは大変ありがたかったです。とてもわかりやすいため、まずはそれから紹介いたします。</p>
<blockquote>
<p>日本Springユーザ会の土岐孝平さんのスライドから<br><a href="https://www.slideshare.net/KouheiToki/1spring?qid=8c143518-f29c-4567-a562-3b29dc763d19&v=&b=&from_search=5" target="_blank" rel="noopener">入社1年目のプログラミング初心者がSpringを学ぶための手引き</a> </p>
</blockquote>
<p>この中の、 </p>
<p><img src="/image/java-study-step/java_step.png" alt title="よい学習ステップ"></p>
<p>この図は、どのステップで学習したらいいのかということや、自分がいまどの地点にいるのかが、とても整理されます。<br>いきなりSpringで開発！ではなく、現実的な地に足のついたルートだとおもいます。</p>
<p>そこで、本記事では図のなかでも一番上、最初の一歩のところの <code>Javaの基本～私流やりかた～</code> をメインに紹介したいと思います。</p>
<h2 id="1段目-Javaの基本～ベースを埋め立てる～"><a href="#1段目-Javaの基本～ベースを埋め立てる～" class="headerlink" title="1段目　Javaの基本～ベースを埋め立てる～"></a>1段目　Javaの基本～ベースを埋め立てる～</h2><p>私が最初に勉強材料としたものは主に3つです。 </p>
<p>①<a href="https://www.amazon.co.jp/%E3%81%93%E3%82%8C%E3%81%AA%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B-Java%E5%85%A5%E9%96%80%E8%AC%9B%E5%BA%A7-%E6%B0%B4%E5%8F%A3-%E5%85%8B%E4%B9%9F/dp/4798043516" target="_blank" rel="noopener">これならわかる！Java入門講座 / 水口克也</a> </p>
<p>②<a href="https://www.sikaku.gr.jp/js/jv/ind/about/range/03/" target="_blank" rel="noopener">Java検定3級</a> </p>
<p>③<a href="https://www.amazon.co.jp/%E8%A7%A3%E3%81%8D%E3%81%AA%E3%81%8C%E3%82%89%E5%AD%A6%E3%81%B6Java-%E5%85%A5%E9%96%80%E7%B7%A8-%E6%9F%B4%E7%94%B0-%E6%9C%9B%E6%B4%8B/dp/4797339543" target="_blank" rel="noopener">新　解きながら学ぶJava </a></p>
<p>まず①はゼロから入ったとき、プログラム言語ってどんななの？なときにとても役立ちました。 </p>
<p>会話形式で内容が進んでいくため、読みやすい＆かなり理解を助けてくれました。 </p>
<p>②は、自分の定着度の確認のために受けました。試験対策（過去問演習）をすると、知識が体系化される感覚を持てたり、基本の用語を抑えられるなど、想像以上に良い勉強材料だったように思います。結果は無事合格。私のはじめの一歩でした。</p>
<p>③は少々難しかったですが、章の区切り毎にキーワード穴埋めページがあり、おさらいできるのと、演習問題→解説の形式なので、頭を使うようになるのと、何が分かってないのか自己分析にもなりました。この本は時間があればもう一度やってみたいです。</p>
<p>この3種が私のJavaの土台です。</p>
<h2 id="1段目-Javaの基本～脇を固める～"><a href="#1段目-Javaの基本～脇を固める～" class="headerlink" title="1段目　Javaの基本～脇を固める～"></a>1段目　Javaの基本～脇を固める～</h2><p>次に私がはじめたのは、基本情報技術者試験の勉強です。一見Javaには関係のない内容ですが<code>Java開発</code>にはおおいに関係するのです。そりゃそうか。そのときはあんまりわかっていませんでしたが。いまとなってはという話です。</p>
<p>ここで、特にやって良かったなぁと思う本の紹介をば/~ </p>
<p>①<a href="https://www.amazon.co.jp/%E6%83%85%E5%A0%B1%E5%87%A6%E7%90%86%E6%95%99%E7%A7%91%E6%9B%B8-%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85%E8%A9%A6%E9%A8%93%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E5%95%8F%E9%A1%8C%E3%81%8C%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E8%A7%A3%E3%81%91%E3%82%8B%E6%9C%AC-%E7%AC%AC2%E7%89%88-%E7%9F%A2%E6%B2%A2-%E4%B9%85%E9%9B%84/dp/4798150460/ref=asc_df_4798150460/?tag=jpgo-22&linkCode=df0&hvadid=295739644034&hvpos=1o1&hvnetw=g&hvrand=6924608982156939188&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009252&hvtargid=pla-525833419833&psc=1&th=1&psc=1" target="_blank" rel="noopener">情報処理教科書 基本情報技術者試験のアルゴリズム問題がちゃんと解ける本 第2版</a></p>
<p>②<a href="https://www.amazon.co.jp/%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85%E5%8D%88%E5%BE%8C%E5%95%8F%E9%A1%8C-%E6%A9%8B%E6%9C%AC%E3%81%AE%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%A6%E8%A7%A3%E3%81%8F-%E8%A1%A8%E8%A8%88%E7%AE%97%E6%95%99%E5%AE%A4-%E6%A9%8B%E6%9C%AC-%E7%A5%90%E5%8F%B2/dp/477415959X/ref=sr_1_10?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85+%E8%A1%A8%E8%A8%88%E7%AE%97&qid=1576754652&s=books&sr=1-10" target="_blank" rel="noopener">基本情報技術者午後問題 橋本のわかって解く! 表計算教室 </a></p>
<p>③<a href="https://www.amazon.co.jp/%E6%94%B9%E8%A8%824%E7%89%88-%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85-%E3%82%89%E3%81%8F%E3%82%89%E3%81%8F%E7%AA%81%E7%A0%B4-%E8%A1%A8%E8%A8%88%E7%AE%97-%E6%83%85%E5%A0%B1%E5%87%A6%E7%90%86%E6%8A%80%E8%A1%93%E8%80%85%E8%A9%A6%E9%A8%93-%E3%82%A4%E3%82%A8%E3%83%AD%E3%83%BC%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE/dp/4297102897/ref=sr_1_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85+%E8%A1%A8%E8%A8%88%E7%AE%97&qid=1576754652&s=books&sr=1-2" target="_blank" rel="noopener">改訂4版　基本情報技術者 らくらく突破　表計算 (情報処理技術者試験)</a></p>
<p>④<a href="https://www.amazon.co.jp/gp/product/B073PX4VDW/ref=dbs_a_def_rwt_hsch_vapi_tkin_p1_i0" target="_blank" rel="noopener">情報処理教科書 出るとこだけ！ 基本情報技術者［午後］</a> </p>
<p>午後試験は、表計算を受ける気満々でいたので、表計算を多めに勉強していました（②、③を主に）ましたが、仲間がJavaで受けたら？と言ってくれたので、勇気をふり絞ってJavaで受けてみたら嬉しいことに満点をとれて自信につながったという明るい話もあります。結局本番は表計算は受けませんでしたが表計算の勉強は地味にいまでも活きていますね。絶対参照とかExcelの関数で日ごろ使いますし、その概念を先に知っていられたのは大きいです。それと、表計算は試験では年々難化していて、当日頭を使う量がおおめ、すばやく考えないといけない、などがシビアだったため、ひねくりが少なめでストレートな問題のおおいJavaを選びました。あたりでした。<br>①のアルゴリズムの本は、トレースの良い練習になりました。アルゴリズムの本試は博打要素おおめなんでそれ以外で安定して点数を取るように努めました。<br>④の本は、ザーッと見渡して、自分の知らないことないかな確認にはピッタリで、地味に図解がわかりやすかったりして、コンパクトにまとまった試験対策本ですね。</p>
<p>基本情報の勉強は渋々やっていたところもありましたが、後々に活きるのでやってよかったなと今では思えます。<br>応用情報ではとばされてるとこもありますし。<br>こういう風にまとまって色んな知識のベースを学ぶ機会ってそんなにない気がしていて、また、いちどでも聞いたことあったりするとそのあとの入りがいいんですよね。実務でも拒否反応なく入り込めたりします。<br>まとめると、ベース（小さい真ん中、コア）、をつくったつぎは、周りに肉付けをしてみましょう。おなじことばっかやってても飽きちゃうし。</p>
<h2 id="1段目-Javaの基本～すばやく解く。実用する～"><a href="#1段目-Javaの基本～すばやく解く。実用する～" class="headerlink" title="1段目　Javaの基本～すばやく解く。実用する～"></a>1段目　Javaの基本～すばやく解く。実用する～</h2><p>たぶん、ベースを固めるためであれば、上記のように何冊もやらなくても、理解力が高い人は大丈夫だと思います。私の場合は色んな書き味や色んな角度から説明してもらわないと理解が追いつかない、分かったつもりが多いので、ちょいと多めにやったかもです。 </p>
<p>さて、次に私がやったのは、より実用的な知識、初心者から初級者へ、そんな思いで、始めたのが次の4つ。</p>
<p>①<a href="https://www.amazon.co.jp/%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8BJava%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E4%B8%AD%E5%B1%B1-%E6%B8%85%E5%96%AC-ebook/dp/B00MIM1KFC/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8BJava&qid=1576755476&s=digital-text&sr=1-1" target="_blank" rel="noopener">スッキリわかるJava入門 第2版 スッキリわかるシリーズ</a></p>
<p>②<a href="https://www.amazon.co.jp/%E3%82%AA%E3%83%A9%E3%82%AF%E3%83%AB%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E6%95%99%E7%A7%91%E6%9B%B8-Java%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E-Bronze-SE-%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E5%95%8F%E9%A1%8C%E9%9B%86-ebook/dp/B01AIB43LW/ref=sr_1_4?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=java+bronze&qid=1576755518&s=digital-text&sr=1-4" target="_blank" rel="noopener">オラクル認定資格教科書 Javaプログラマ Bronze SE 7/8 スピードマスター問題集</a></p>
<p>③<a href="https://www.sikaku.gr.jp/js/jv/ind/about/range/02/" target="_blank" rel="noopener">Java検定2級</a></p>
<p>④<a href="https://www.amazon.co.jp/dp/B076F36Z89/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1" target="_blank" rel="noopener">2週間でJava SE Bronzeの基礎が学べる本 徹底攻略シリーズ</a></p>
<p>①は、復習もかねて読みましたが、わかりやすいので、理解がぐんぐん深まり、あ～こういうことだったのかぁ。が多かったです。</p>
<p>②は、問題集から入る方が好きなので、これは夢中になって解きました。公式アプリも買ってプチプチ解いていました。このころは楽しかった←</p>
<p>③は、これまた体系的に学ぶにはとてもよくて、３級よりも高得点をとれたのは嬉しかったです。最後の応用問題をなぜか満点取れて興奮しました（笑）</p>
<p>④この本は本当に分かりやすいし、専門書っぽい丁寧な書き口。オーバーロードとオーバーライドの違いをいまいちど整理できましたね、その印象が強いのでそこだけ自分の勉強メモをのっけます↓</p>
<blockquote>
<ul>
<li>オーバーロードはメソッドの多重定義</li>
<li>オーバーライドはメソッドの再定義</li>
<li>オーバーロードは同じメソッド名でも、シグニチャが異なれば異なるメソッドとして扱われる</li>
<li>オーバーライドはスーパークラスのメソッドを再定義するので、戻り値型やメソッド名、引数などを同一にする必要有り。</li>
<li>オーバーライドするつもりなのに、メソッドの引数をスーパークラスと異なるものにしてしまった場合はオーバーロードと見なされるため、コンパイルエラーは起きない。これらの予防方法として、@Override というアノテーションつけると、コンパイルエラーがでるため、ミスに気付きやすい利点もある。</li>
</ul>
</blockquote>
<p>あぁたのしいなオーバーシリーズ！笑。<br>こういう勉強メモの紹介も追々やっていこう。っと</p>
<h2 id="2段目-web周りなどはクラスタで"><a href="#2段目-web周りなどはクラスタで" class="headerlink" title="2段目　web周りなどはクラスタで"></a>2段目　web周りなどはクラスタで</h2><p>Web周りはクラスタ勉強会、SQLはプロジェクト実務、MVCは両方、Junitはクラスタ勉強会、というところでしょうか。やはり人と一緒に学ぶと一人でやるより効率よかったり印象に残ったりしますね！とても恵まれていたと思います。出会いに感謝。</p>
<h2 id="3段目-そしてSpringに出会う"><a href="#3段目-そしてSpringに出会う" class="headerlink" title="3段目　そしてSpringに出会う"></a>3段目　そしてSpringに出会う</h2><p>社会人2年目はSpringとお友達になりました。<br>そして最近、自覚できたのは、Springの裏側ではサーブレットやJSPも動いているということ。だから新人研修でサーブレットなどやれたのもよかったということ。忘れかけてたけど、便利なものから不便なものに人は戻れないように、勉強も泥くさい不便なことからやったほうがなにかと有難みがわかりますねってことです。</p>
<h2 id="4段目-Springの応用"><a href="#4段目-Springの応用" class="headerlink" title="4段目　Springの応用"></a>4段目　Springの応用</h2><p>これはCRUD課題を終え現在がんばってるところ。SpringSecurityもだいぶ怖くなくなった(笑)。設計は日頃の業務で時々やらせてもらっています。概要設計や、分かる画面に関しては詳細設計まで。まだまだ一人ではパーフェクトに書けませんが、えっこらえっこらやってます。</p>
<p>来年は3年目になります。<br>もう若手ぶってはいられないかな。さみしい。私が新人の時の3年目の先輩の小慣れ感を身に付けたいものです。</p>
<p>後輩に教えられるくらい、自分の理解を深い所に持って行って、そして全体的に余裕のある人になりたいですね。</p>
<h2 id="ここまで、そしてこれから"><a href="#ここまで、そしてこれから" class="headerlink" title="ここまで、そしてこれから"></a>ここまで、そしてこれから</h2><p>ここまで色んな本を紹介してきました。多分これはスマートじゃないやり方です。色々回り道してきました。もっと最短コースもあります。</p>
<p>けれどいいたいのは、何がどこで役に立つかわからないので、夢中になれることをそのときどきで真剣にやる。そんなことを体を張って表してみたつもりです。</p>
<p>そして、知識の数より、できることの数です。耳が痛いような歯がゆいような。アイタタタ。出来る事を増やしましょう。Excelですばやく情報を整理できるとか、ファイル名や変数名を他者にわかりやすいように付けられるようになった！とか、日頃の処理能力が上がった！とか、目を見て話せるようになった！とかとか。毎日毎日人は進化しているように、まずはできることを増やそう、できることを数えてみよう、昨日より今日の方がよくできたなぁ、よかった。自分をたまには褒めよう、そう思える毎日を。</p>
<p>私はちいさく進化しつつ深化もがんばりたい。浅く広く色んなことやっているけど、どの経験も繋がったらいいな。深めるには一人の時間を作って黙々と思考しながら試行する地道な作業が必要です。初心に戻って朝活からもどしていきますか。</p>
<p>あとJavaは触れていないとじみに忘れていきます。毎日少しでもやる。ギターの練習ににてますね。コードらぶ</p>
<p>最近はとある１冊を１章ずつ紹介しようと試みてます。<br>もっとアウトプットをしよう。３年目はアウトプットの年にしたい。</p>
<p>結構前からですが言語への学問的興味も沸いています。しかし我々はIT学者じゃなく、IT技術者なのです。そこも忘れずに、仕事につなげましょう。</p>
<p>過去の自分に顔向けできるようにまたがんばろう。</p>
<p>なんだか技術紹介というより感想文に近いですが、いち新人の体験談として温かく見守っていただけると幸いです。<br>今回は時間の関係で（WBSたてればよかった）大まかな話に終始してしまいましたが、次はもうすこし狭いけど深い話になるように、深堀頑張ります。もうすぐクリスマスですね。</p>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191027]]></title>
        <url>https://yuuzn.github.io/2019/10/27/guitar-20191027/</url>
        <content type="html"><![CDATA[<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>スライダーは押さえずに触れさせる感じ</li>
</ul>
<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>アルペジオのとき7/8拍子にせず、6432^343</li>
<li>右手硬い</li>
<li>アルペジオのとき右手見ないので、間隔を身体に染み込ませること。その感覚は1弦から弾いていくと自然に右手の手のひらの固定部分が浮くのでその位置にする。6弦弾くときは6弦浮かすてきな</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191019]]></title>
        <url>https://yuuzn.github.io/2019/10/19/guitar-20191019/</url>
        <content type="html"><![CDATA[<h3 id="左手動き"><a href="#左手動き" class="headerlink" title="左手動き"></a>左手動き</h3><ul>
<li>D7開放→D7</li>
<li>3フレット6弦、2フレット3弦</li>
<li>3フレット5弦、2フレット3弦</li>
<li>左手はミスっても次へ進めること、止まらないこと</li>
</ul>
<h3 id="右手動き"><a href="#右手動き" class="headerlink" title="右手動き"></a>右手動き</h3><ul>
<li>アルペジオは最初は上から弾く、オルタナティブはまだ</li>
<li>643234</li>
<li>6弦の杭のとこに右手固定し感覚で覚えて見ないで弾けるように</li>
<li>リズムを刻む、間をとったり空振り早くしたりしない、一定のリズム、メトロノーム</li>
<li>腕の位置はピックの位置から逆算、サウンドホールがおすすめ</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[Hello World]]></title>
        <url>https://yuuzn.github.io/2019/10/14/hello-world/</url>
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
        
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191010]]></title>
        <url>https://yuuzn.github.io/2019/10/10/guitar-20191010/</url>
        <content type="html"><![CDATA[<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>Ｆでは人差し指、薬指、小指で押さえる練習から</li>
<li>フレットをどんどん右に移動させる練習も有効</li>
<li>反復の基礎練</li>
<li>右手爪は伸ばすが左手爪は切る</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191004]]></title>
        <url>https://yuuzn.github.io/2019/10/04/guitar-20191004/</url>
        <content type="html"><![CDATA[<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>ピックの持ち方は弦に対して、親指平行、人差し指垂直</li>
<li>ピックの厚みは0.7~0.8くらいミディアム</li>
<li>右腕をギターにあてて支点にして手首を大きく柔らかく振る</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>弦を覗かなくても触れるように</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20190928]]></title>
        <url>https://yuuzn.github.io/2019/09/28/guitar-20190928/</url>
        <content type="html"><![CDATA[<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>手の力を抜く</li>
<li>撫でる感じで触れるだけ</li>
<li>音の強弱は右手の力でつけるのではなく、右手の振りの大きさでつく</li>
<li>自然と斜めに弾くことになる</li>
<li>アルペジオは6弦ネジの上に右手のひら固定</li>
<li>アルペジオは目で見ずに弦と弦の間隔を手に覚えさせる</li>
<li>空振りを無意識でもできるように</li>
<li>2分は同じストロークを繰り返して練習 </li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>親指を乗せるのは支えの意味もある</li>
<li>親指を乗せるから力が入る</li>
<li>親指とそれ以外の指で挟み込む感じ</li>
<li>何度もコードを押さえる練習をすると、腕に力がつくので、次第に指に強く力をかけなくても押さえられるようになる</li>
<li>左手の押さえの慣れは筋トレみたいな感じで練習量に比例する</li>
<li>コードチェンジの際は最短距離で移動する</li>
<li>コードチェンジでパーにして開かない、リセットは無意味</li>
<li>コードチェンジで親指を無駄に動かさない</li>
<li>コードチェンジで指の形をそのまま使える時は形ごと移動</li>
<li>コードチェンジするときは頭の中で次の指の形を思い浮かべる</li>
<li>7がつくコードは基本形から何かしら指を外すコード！</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[アイネ・クライネ・ナハトムジーク]]></title>
        <url>https://yuuzn.github.io/2019/09/22/ainekuraine/</url>
        <content type="html"><![CDATA[<p>色んな人の人生が重なり合って、<br>みんな一人で生きてるんじゃないんだって想えた映画でした。<br>斉藤さんの歌詞が何度も頭に浮かんだり、<br>伊坂さんの小説のシーンを思い出したり、<br>台詞にクスッと笑えたり、ジーンときたり、<br>作り手のメッセージが凄く伝わってきました。<br>どの世代の人が観ても楽しめる映画だと思います!<br>期待を遥かに超えた仕上がりに感無量！！</p>
]]></content>
        
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> movie </tag>
            
            <tag> saitou-kazuyoshi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20190921]]></title>
        <url>https://yuuzn.github.io/2019/09/21/guitar-20190921/</url>
        <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="道具"><a href="#道具" class="headerlink" title="道具"></a>道具</h3><ul>
<li>初心者は柔らかいピックを使った方がぎこちない音になりにくい</li>
</ul>
<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>ストローク5種を日々練習</li>
<li>1種につき2分は続けて練習</li>
<li>右手練習時はコードはG等で1種でよい</li>
<li>4分音符ごとにアクセント</li>
<li>手は一定の振り</li>
<li>体に染み込むまで練習する</li>
<li>左手練より右手練が先</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>6弦から押さえる</li>
<li>Fでは親指を下げる</li>
<li>バレーコード以外では親指位置は固定</li>
<li>フレットに指を乗っけない</li>
<li>基本コード12種をまず身につける</li>
<li>コード進行は少なくとも1つ先を考えながら弾く</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    
    
    
    <entry>
        <title><![CDATA[image]]></title>
        <url>https://yuuzn.github.io/image/index.html</url>
        <content type="html"></content>
    </entry>
    
    
</search>
