<?xml version="1.0" encoding="utf-8"?>
<search>
    
    
    <entry>
        <title><![CDATA[コンストラクタとthisの話]]></title>
        <url>https://yuuzn.github.io/2019/12/24/constructor-this/</url>
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>前回に引き続きJavaです。今回は、かつて初見で自分がくじけた箇所、理解に時間がかかった箇所、そう、<code>コンストラクタ</code>と<code>this</code>についてまとめたいと思います。</p>
<h2 id="コンストラクタとは？"><a href="#コンストラクタとは？" class="headerlink" title="コンストラクタとは？"></a>コンストラクタとは？</h2><p>new演算子で作成した直後のオブジェクトのフィールドには、意味のある具体的な値ではなく、nullや0などが入っています。<br>コンストラクタを作成するとオブジェクト作成時に特定の値をフィールドにセットできるようになります。<br>コンストラクタは「構築者」という意味であるのも然り。<br>new演算子がオブジェクトを作成した直後、コンストラクタが起動して、オブジェクトに具体的な初期値をセットするのです。<br>コンストラクタはメソッドと似ているがメソッドではありません。名前がクラス名と同じで、戻り値型の指定もないのです。</p>
<h2 id="thisってなに？"><a href="#thisってなに？" class="headerlink" title="thisってなに？"></a>thisってなに？</h2><p>thisはオブジェクト自身の参照なのですが、これはthisの働きを知ったほうが理解が早いです。次の次を読んでね</p>
<h2 id="コンストラクタの役割"><a href="#コンストラクタの役割" class="headerlink" title="コンストラクタの役割"></a>コンストラクタの役割</h2><ul>
<li>オブジェクトの初期化を行う(≒フィールドに適当な値をセットすること)</li>
<li>オブジェクトを作成するのはnew演算子の働きで、それを適切に初期化するのがコンストラクタの役割</li>
</ul>
<h2 id="thisの役割"><a href="#thisの役割" class="headerlink" title="thisの役割"></a>thisの役割</h2><ul>
<li>「これ(this)がフィールドです」とコンパイラに教える働き<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Product</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String code;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(code, price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>※引数の名前がフィールド変数と異なるときはthisは不要</p>
<ul>
<li>thisはコンストラクタに限らず、メソッドの中でも、フィールド変数と同じ名前の変数があって区別しなければならないときには、this.○○という形で使う</li>
</ul>
<h2 id="コンストラクタの書き方、使い方"><a href="#コンストラクタの書き方、使い方" class="headerlink" title="コンストラクタの書き方、使い方"></a>コンストラクタの書き方、使い方</h2><ul>
<li>new演算子とセットで用いる</li>
<li>コンストラクタの定義の中ではreturn文以外ならどんな命令文でも書くことができる</li>
<li>自前でコンストラクタの定義を書いた場合は、引数なしのコンストラクタ(デフォルトコンストラクタ)は呼び出せなくなる(←デフォルトコンストラクタが自動作成されないため呼び出してもコンパイルエラー)</li>
</ul>
<h2 id="thisの使い方"><a href="#thisの使い方" class="headerlink" title="thisの使い方"></a>thisの使い方</h2><ul>
<li>this.[メンバ名]という形で使用</li>
<li>return this; のように参照として単体でも使用可能</li>
<li>コンストラクタやインスタンスメソッドなどの中で使用可能</li>
<li>クラスメソッドの中で使用するとコンパイルエラーになる(ex. mainのようなクラスメソッドの中ではthisは使用不可)(←クラスメソッドはオブジェクトではないのでthisの値がわからないため)</li>
</ul>
<h2 id="コンストラクタのポイント"><a href="#コンストラクタのポイント" class="headerlink" title="コンストラクタのポイント"></a>コンストラクタのポイント</h2><ul>
<li>オブジェクトの初期化を行う</li>
<li>new演算子がオブジェクトを作成した後に必ず呼び出される</li>
<li>クラスと同じ名前を持つ</li>
<li>戻り値がない(voidも書かない)</li>
<li>コンストラクタはオブジェクトに取り込まれない(≒コンストラクタの実体はクラスファイルの中にある)</li>
<li>コンストラクタが定義されてない時のみ、デフォルトコンストラクタが暗黙の内に作成される</li>
<li>デフォルトコンストラクタは常に引数がない</li>
<li>コンストラクタを作成するとデフォルトコンストラクタは作成されなくなる</li>
<li>コンストラクタはオーバーロード(多重定義)できる</li>
</ul>
<h2 id="thisのポイント"><a href="#thisのポイント" class="headerlink" title="thisのポイント"></a>thisのポイント</h2><ul>
<li>thisはオブジェクト自身の参照である</li>
<li>すべてのオブジェクトがthisを持つ</li>
</ul>
<h2 id="コンストラクタのちょっと細かい話"><a href="#コンストラクタのちょっと細かい話" class="headerlink" title="コンストラクタのちょっと細かい話"></a>コンストラクタのちょっと細かい話</h2><ul>
<li>コンストラクタと同名のメソッドを作れる(←メソッド名の前に戻り値型を書いたとき)</li>
<li>コンストラクタはクラス名と完全に同じでなければならない(←小文字と大文字も区別される)</li>
<li>コンストラクタを複数定義することをコンストラクタのオーバーロード(多重定義)という</li>
<li>引数の構成(型の種類、個数、並び順、のいずれか)が異なれば、コンストラクタを幾つでも作成可能<br>※引数の名前を異なるようにしただけではオーバーロードにはならない<br>※アクセス修飾子を異なるようにしただけではオーバーロードにならない</li>
</ul>
<h3 id="デフォルトコンストラクタ"><a href="#デフォルトコンストラクタ" class="headerlink" title="デフォルトコンストラクタ"></a>デフォルトコンストラクタ</h3><ul>
<li><p>見ることはできないが実体は以下のようなもの</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>デフォルトコンストラクタはコンパイラが作成する見えないコンストラクタである</p>
</li>
<li><p>コンパイラが作成しclassファイル(実行可能なJavaバイトコードのファイル)に挿入される</p>
</li>
<li><p>デフォルトコンストラクタのアクセス修飾子はクラスと同じになる</p>
<h2 id="thisのちょっと細かい話"><a href="#thisのちょっと細かい話" class="headerlink" title="thisのちょっと細かい話"></a>thisのちょっと細かい話</h2></li>
<li><p>見えないところでコンパイラは全てのフィールド変数にthisを付けている</p>
</li>
<li><p>プログラマがthisを付けるのはコンパイラの作業を助けるため</p>
</li>
<li><p>thisは実行時にはオブジェクトの参照に置き換えられる</p>
</li>
<li><p>this()によってコンストラクタを呼び出せる</p>
<h3 id="this-の紹介"><a href="#this-の紹介" class="headerlink" title="this()の紹介"></a>this()の紹介</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String santaClausName;</span><br><span class="line">    String presentCode;</span><br><span class="line">    <span class="keyword">int</span> cakeCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = santaClausName;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝ presentCode;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode, <span class="keyword">int</span> cakeCount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = santaClausName;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝ presentCode;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = cakeCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>上記のコードは見てわかる通り繰り返しが多いです。this()を使ってコードを簡易化してみましょう。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String santaClausName;</span><br><span class="line">    String presentCode;</span><br><span class="line">    <span class="keyword">int</span> cakeCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">""</span>, <span class="string">""</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(santaClausName, presentCode, <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Christmas</span><span class="params">(String santaClausName, String presentCode, <span class="keyword">int</span> cakeCount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.santaClausName = santaClausName;</span><br><span class="line">        <span class="keyword">this</span>.presentCode＝ presentCode;</span><br><span class="line">        <span class="keyword">this</span>.cakeCount = cakeCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>this()はコンストラクタが他のコンストラクタを呼び出す書き方</li>
<li>this()には注意が2点ある <ul>
<li>this()はコンストラクタの最初の行に書かなければならない</li>
<li>this()はメソッドでは使えない</li>
</ul>
</li>
</ul>
<h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>こうしてまとめてみると、案外ひっかからずにすんなり読めそうな内容ですね。かつて言語の勉強を始めたばかりの頃の私は大いにつまずきました(笑)。かつての自分に言ってあげたい。ひとつひとつ調べて理解しようね、と。わからないことが複数になると何がわからないのかもわからなくなって迷走するのでね、と。<br>おっと、言い忘れそうなのでこの辺で。メリークリスマスイブ☆彡<br><img src="/image/constructor-this/penguin_love.png" alt title="penguin_love"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote>
<ul>
<li>「わかりやすいJava オブジェクト指向編　/ 川場隆　(秀和システム)」  </li>
<li>「優しく学ぶ　Javaプログラマ　/　山本道子　（翔泳社）」</li>
</ul>
</blockquote>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[私のJava開発学習ロードマップ]]></title>
        <url>https://yuuzn.github.io/2019/12/20/java-study-step/</url>
        <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Javaの勉強法（現在進行中）をいつかまとめたいな..と思っていたので、社内のAdventCalendarを契機にしてこの度重い腰をあげてまとめてみることにしました。そんな決意をした数日後にSpringFestに参加したのですが、そこでまさにjust fitなセミナーがあったため、その内容も紹介しつつ書いていきたいと思います。</p>
<h2 id="なんでJava"><a href="#なんでJava" class="headerlink" title="なんでJava?"></a>なんでJava?</h2><p>基幹系のシステムに強いなどJavaを使うメリットは沢山あると思います。私の中では、記述がめんどくさい（≒丁寧に書く習慣が身に付く）、本や勉強度合いの目安になる試験が多い（≒言語を理解する勉強材料として最適）、大変なもの重めのもの迷ったら難しいほうをやる（≒他の言語に移るときに楽と思えそう）、という理由があって続けております。</p>
<h2 id="なにからどこまで"><a href="#なにからどこまで" class="headerlink" title="なにからどこまで"></a>なにからどこまで</h2><p>私はラフティング型でJavaの勉強を積上げてきたので（長期的なゴールを意識していない）先のことはあまり考えずに目の前で一生懸命系でした。そんなとき、前述のSpringFestのセミナーにより、今いる地点を知れたり、今後の指針が見えたりして、これは大変ありがたかったです。とてもわかりやすいため、まずはそれから紹介いたします。</p>
<blockquote>
<p>日本Springユーザ会の土岐孝平さんのスライドから<br><a href="https://www.slideshare.net/KouheiToki/1spring?qid=8c143518-f29c-4567-a562-3b29dc763d19&v=&b=&from_search=5" target="_blank" rel="noopener">入社1年目のプログラミング初心者がSpringを学ぶための手引き</a> </p>
</blockquote>
<p>この中の、 </p>
<p><img src="/image/java-study-step/java_step.png" alt title="よい学習ステップ"></p>
<p>この図は、どのステップで学習したらいいのかということや、自分がいまどの地点にいるのかが、とても整理されます。<br>いきなりSpringで開発！ではなく、現実的な地に足のついたルートだとおもいます。</p>
<p>そこで、本記事では図のなかでも一番上、最初の一歩のところの <code>Javaの基本～私流やりかた～</code> をメインに紹介したいと思います。</p>
<h2 id="1段目-Javaの基本～ベースを埋め立てる～"><a href="#1段目-Javaの基本～ベースを埋め立てる～" class="headerlink" title="1段目　Javaの基本～ベースを埋め立てる～"></a>1段目　Javaの基本～ベースを埋め立てる～</h2><p>私が最初に勉強材料としたものは主に3つです。 </p>
<p>①<a href="https://www.amazon.co.jp/%E3%81%93%E3%82%8C%E3%81%AA%E3%82%89%E3%82%8F%E3%81%8B%E3%82%8B-Java%E5%85%A5%E9%96%80%E8%AC%9B%E5%BA%A7-%E6%B0%B4%E5%8F%A3-%E5%85%8B%E4%B9%9F/dp/4798043516" target="_blank" rel="noopener">これならわかる！Java入門講座 / 水口克也</a> </p>
<p>②<a href="https://www.sikaku.gr.jp/js/jv/ind/about/range/03/" target="_blank" rel="noopener">Java検定3級</a> </p>
<p>③<a href="https://www.amazon.co.jp/%E8%A7%A3%E3%81%8D%E3%81%AA%E3%81%8C%E3%82%89%E5%AD%A6%E3%81%B6Java-%E5%85%A5%E9%96%80%E7%B7%A8-%E6%9F%B4%E7%94%B0-%E6%9C%9B%E6%B4%8B/dp/4797339543" target="_blank" rel="noopener">新　解きながら学ぶJava </a></p>
<p>まず①はゼロから入ったとき、プログラム言語ってどんななの？なときにとても役立ちました。 </p>
<p>会話形式で内容が進んでいくため、読みやすい＆かなり理解を助けてくれました。 </p>
<p>②は、自分の定着度の確認のために受けました。試験対策（過去問演習）をすると、知識が体系化される感覚を持てたり、基本の用語を抑えられるなど、想像以上に良い勉強材料だったように思います。結果は無事合格。私のはじめの一歩でした。</p>
<p>③は少々難しかったですが、章の区切り毎にキーワード穴埋めページがあり、おさらいできるのと、演習問題→解説の形式なので、頭を使うようになるのと、何が分かってないのか自己分析にもなりました。この本は時間があればもう一度やってみたいです。</p>
<p>この3種が私のJavaの土台です。</p>
<h2 id="1段目-Javaの基本～脇を固める～"><a href="#1段目-Javaの基本～脇を固める～" class="headerlink" title="1段目　Javaの基本～脇を固める～"></a>1段目　Javaの基本～脇を固める～</h2><p>次に私がはじめたのは、基本情報技術者試験の勉強です。一見Javaには関係のない内容ですが<code>Java開発</code>にはおおいに関係するのです。そりゃそうか。そのときはあんまりわかっていませんでしたが。いまとなってはという話です。</p>
<p>ここで、特にやって良かったなぁと思う本の紹介をば/~ </p>
<p>①<a href="https://www.amazon.co.jp/%E6%83%85%E5%A0%B1%E5%87%A6%E7%90%86%E6%95%99%E7%A7%91%E6%9B%B8-%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85%E8%A9%A6%E9%A8%93%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E5%95%8F%E9%A1%8C%E3%81%8C%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E8%A7%A3%E3%81%91%E3%82%8B%E6%9C%AC-%E7%AC%AC2%E7%89%88-%E7%9F%A2%E6%B2%A2-%E4%B9%85%E9%9B%84/dp/4798150460/ref=asc_df_4798150460/?tag=jpgo-22&linkCode=df0&hvadid=295739644034&hvpos=1o1&hvnetw=g&hvrand=6924608982156939188&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009252&hvtargid=pla-525833419833&psc=1&th=1&psc=1" target="_blank" rel="noopener">情報処理教科書 基本情報技術者試験のアルゴリズム問題がちゃんと解ける本 第2版</a></p>
<p>②<a href="https://www.amazon.co.jp/%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85%E5%8D%88%E5%BE%8C%E5%95%8F%E9%A1%8C-%E6%A9%8B%E6%9C%AC%E3%81%AE%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%A6%E8%A7%A3%E3%81%8F-%E8%A1%A8%E8%A8%88%E7%AE%97%E6%95%99%E5%AE%A4-%E6%A9%8B%E6%9C%AC-%E7%A5%90%E5%8F%B2/dp/477415959X/ref=sr_1_10?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85+%E8%A1%A8%E8%A8%88%E7%AE%97&qid=1576754652&s=books&sr=1-10" target="_blank" rel="noopener">基本情報技術者午後問題 橋本のわかって解く! 表計算教室 </a></p>
<p>③<a href="https://www.amazon.co.jp/%E6%94%B9%E8%A8%824%E7%89%88-%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85-%E3%82%89%E3%81%8F%E3%82%89%E3%81%8F%E7%AA%81%E7%A0%B4-%E8%A1%A8%E8%A8%88%E7%AE%97-%E6%83%85%E5%A0%B1%E5%87%A6%E7%90%86%E6%8A%80%E8%A1%93%E8%80%85%E8%A9%A6%E9%A8%93-%E3%82%A4%E3%82%A8%E3%83%AD%E3%83%BC%E3%83%86%E3%83%BC%E3%83%AB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE/dp/4297102897/ref=sr_1_2?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85+%E8%A1%A8%E8%A8%88%E7%AE%97&qid=1576754652&s=books&sr=1-2" target="_blank" rel="noopener">改訂4版　基本情報技術者 らくらく突破　表計算 (情報処理技術者試験)</a></p>
<p>④<a href="https://www.amazon.co.jp/gp/product/B073PX4VDW/ref=dbs_a_def_rwt_hsch_vapi_tkin_p1_i0" target="_blank" rel="noopener">情報処理教科書 出るとこだけ！ 基本情報技術者［午後］</a> </p>
<p>午後試験は、表計算を受ける気満々でいたので、表計算を多めに勉強していました（②、③を主に）ましたが、仲間がJavaで受けたら？と言ってくれたので、勇気をふり絞ってJavaで受けてみたら嬉しいことに満点をとれて自信につながったという明るい話もあります。結局本番は表計算は受けませんでしたが表計算の勉強は地味にいまでも活きていますね。絶対参照とかExcelの関数で日ごろ使いますし、その概念を先に知っていられたのは大きいです。それと、表計算は試験では年々難化していて、当日頭を使う量がおおめ、すばやく考えないといけない、などがシビアだったため、ひねくりが少なめでストレートな問題のおおいJavaを選びました。あたりでした。<br>①のアルゴリズムの本は、トレースの良い練習になりました。アルゴリズムの本試は博打要素おおめなんでそれ以外で安定して点数を取るように努めました。<br>④の本は、ザーッと見渡して、自分の知らないことないかな確認にはピッタリで、地味に図解がわかりやすかったりして、コンパクトにまとまった試験対策本ですね。</p>
<p>基本情報の勉強は渋々やっていたところもありましたが、後々に活きるのでやってよかったなと今では思えます。<br>応用情報ではとばされてるとこもありますし。<br>こういう風にまとまって色んな知識のベースを学ぶ機会ってそんなにない気がしていて、また、いちどでも聞いたことあったりするとそのあとの入りがいいんですよね。実務でも拒否反応なく入り込めたりします。<br>まとめると、ベース（小さい真ん中、コア）、をつくったつぎは、周りに肉付けをしてみましょう。おなじことばっかやってても飽きちゃうし。</p>
<h2 id="1段目-Javaの基本～すばやく解く。実用する～"><a href="#1段目-Javaの基本～すばやく解く。実用する～" class="headerlink" title="1段目　Javaの基本～すばやく解く。実用する～"></a>1段目　Javaの基本～すばやく解く。実用する～</h2><p>たぶん、ベースを固めるためであれば、上記のように何冊もやらなくても、理解力が高い人は大丈夫だと思います。私の場合は色んな書き味や色んな角度から説明してもらわないと理解が追いつかない、分かったつもりが多いので、ちょいと多めにやったかもです。 </p>
<p>さて、次に私がやったのは、より実用的な知識、初心者から初級者へ、そんな思いで、始めたのが次の4つ。</p>
<p>①<a href="https://www.amazon.co.jp/%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8BJava%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8B%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E4%B8%AD%E5%B1%B1-%E6%B8%85%E5%96%AC-ebook/dp/B00MIM1KFC/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%82%B9%E3%83%83%E3%82%AD%E3%83%AA%E3%82%8F%E3%81%8B%E3%82%8BJava&qid=1576755476&s=digital-text&sr=1-1" target="_blank" rel="noopener">スッキリわかるJava入門 第2版 スッキリわかるシリーズ</a></p>
<p>②<a href="https://www.amazon.co.jp/%E3%82%AA%E3%83%A9%E3%82%AF%E3%83%AB%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E6%95%99%E7%A7%91%E6%9B%B8-Java%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E-Bronze-SE-%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E5%95%8F%E9%A1%8C%E9%9B%86-ebook/dp/B01AIB43LW/ref=sr_1_4?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=java+bronze&qid=1576755518&s=digital-text&sr=1-4" target="_blank" rel="noopener">オラクル認定資格教科書 Javaプログラマ Bronze SE 7/8 スピードマスター問題集</a></p>
<p>③<a href="https://www.sikaku.gr.jp/js/jv/ind/about/range/02/" target="_blank" rel="noopener">Java検定2級</a></p>
<p>④<a href="https://www.amazon.co.jp/dp/B076F36Z89/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1" target="_blank" rel="noopener">2週間でJava SE Bronzeの基礎が学べる本 徹底攻略シリーズ</a></p>
<p>①は、復習もかねて読みましたが、わかりやすいので、理解がぐんぐん深まり、あ～こういうことだったのかぁ。が多かったです。</p>
<p>②は、問題集から入る方が好きなので、これは夢中になって解きました。公式アプリも買ってプチプチ解いていました。このころは楽しかった←</p>
<p>③は、これまた体系的に学ぶにはとてもよくて、３級よりも高得点をとれたのは嬉しかったです。最後の応用問題をなぜか満点取れて興奮しました（笑）</p>
<p>④この本は本当に分かりやすいし、専門書っぽい丁寧な書き口。オーバーロードとオーバーライドの違いをいまいちど整理できましたね、その印象が強いのでそこだけ自分の勉強メモをのっけます↓</p>
<blockquote>
<ul>
<li>オーバーロードはメソッドの多重定義</li>
<li>オーバーライドはメソッドの再定義</li>
<li>オーバーロードは同じメソッド名でも、シグニチャが異なれば異なるメソッドとして扱われる</li>
<li>オーバーライドはスーパークラスのメソッドを再定義するので、戻り値型やメソッド名、引数などを同一にする必要有り。</li>
<li>オーバーライドするつもりなのに、メソッドの引数をスーパークラスと異なるものにしてしまった場合はオーバーロードと見なされるため、コンパイルエラーは起きない。これらの予防方法として、@Override というアノテーションつけると、コンパイルエラーがでるため、ミスに気付きやすい利点もある。</li>
</ul>
</blockquote>
<p>あぁたのしいなオーバーシリーズ！笑。<br>こういう勉強メモの紹介も追々やっていこう。っと</p>
<h2 id="2段目-web周りなどはクラスタで"><a href="#2段目-web周りなどはクラスタで" class="headerlink" title="2段目　web周りなどはクラスタで"></a>2段目　web周りなどはクラスタで</h2><p>Web周りはクラスタ勉強会、SQLはプロジェクト実務、MVCは両方、Junitはクラスタ勉強会、というところでしょうか。やはり人と一緒に学ぶと一人でやるより効率よかったり印象に残ったりしますね！とても恵まれていたと思います。出会いに感謝。</p>
<h2 id="3段目-そしてSpringに出会う"><a href="#3段目-そしてSpringに出会う" class="headerlink" title="3段目　そしてSpringに出会う"></a>3段目　そしてSpringに出会う</h2><p>社会人2年目はSpringとお友達になりました。<br>そして最近、自覚できたのは、Springの裏側ではサーブレットやJSPも動いているということ。だから新人研修でサーブレットなどやれたのもよかったということ。忘れかけてたけど、便利なものから不便なものに人は戻れないように、勉強も泥くさい不便なことからやったほうがなにかと有難みがわかりますねってことです。</p>
<h2 id="4段目-Springの応用"><a href="#4段目-Springの応用" class="headerlink" title="4段目　Springの応用"></a>4段目　Springの応用</h2><p>これはCRUD課題を終え現在がんばってるところ。SpringSecurityもだいぶ怖くなくなった(笑)。設計は日頃の業務で時々やらせてもらっています。概要設計や、分かる画面に関しては詳細設計まで。まだまだ一人ではパーフェクトに書けませんが、えっこらえっこらやってます。</p>
<p>来年は3年目になります。<br>もう若手ぶってはいられないかな。さみしい。私が新人の時の3年目の先輩の小慣れ感を身に付けたいものです。</p>
<p>後輩に教えられるくらい、自分の理解を深い所に持って行って、そして全体的に余裕のある人になりたいですね。</p>
<h2 id="ここまで、そしてこれから"><a href="#ここまで、そしてこれから" class="headerlink" title="ここまで、そしてこれから"></a>ここまで、そしてこれから</h2><p>ここまで色んな本を紹介してきました。多分これはスマートじゃないやり方です。色々回り道してきました。もっと最短コースもあります。</p>
<p>けれどいいたいのは、何がどこで役に立つかわからないので、夢中になれることをそのときどきで真剣にやる。そんなことを体を張って表してみたつもりです。</p>
<p>そして、知識の数より、できることの数です。耳が痛いような歯がゆいような。アイタタタ。出来る事を増やしましょう。Excelですばやく情報を整理できるとか、ファイル名や変数名を他者にわかりやすいように付けられるようになった！とか、日頃の処理能力が上がった！とか、目を見て話せるようになった！とかとか。毎日毎日人は進化しているように、まずはできることを増やそう、できることを数えてみよう、昨日より今日の方がよくできたなぁ、よかった。自分をたまには褒めよう、そう思える毎日を。</p>
<p>私はちいさく進化しつつ深化もがんばりたい。浅く広く色んなことやっているけど、どの経験も繋がったらいいな。深めるには一人の時間を作って黙々と思考しながら試行する地道な作業が必要です。初心に戻って朝活からもどしていきますか。</p>
<p>あとJavaは触れていないとじみに忘れていきます。毎日少しでもやる。ギターの練習ににてますね。コードらぶ</p>
<p>最近はとある１冊を１章ずつ紹介しようと試みてます。<br>もっとアウトプットをしよう。３年目はアウトプットの年にしたい。</p>
<p>結構前からですが言語への学問的興味も沸いています。しかし我々はIT学者じゃなく、IT技術者なのです。そこも忘れずに、仕事につなげましょう。</p>
<p>過去の自分に顔向けできるようにまたがんばろう。</p>
<p>なんだか技術紹介というより感想文に近いですが、いち新人の体験談として温かく見守っていただけると幸いです。<br>今回は時間の関係で（WBSたてればよかった）大まかな話に終始してしまいましたが、次はもうすこし狭いけど深い話になるように、深堀頑張ります。もうすぐクリスマスですね。</p>
]]></content>
        
        <categories>
            
            <category> skill </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191027]]></title>
        <url>https://yuuzn.github.io/2019/10/27/guitar-20191027/</url>
        <content type="html"><![CDATA[<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>スライダーは押さえずに触れさせる感じ</li>
</ul>
<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>アルペジオのとき7/8拍子にせず、6432^343</li>
<li>右手硬い</li>
<li>アルペジオのとき右手見ないので、間隔を身体に染み込ませること。その感覚は1弦から弾いていくと自然に右手の手のひらの固定部分が浮くのでその位置にする。6弦弾くときは6弦浮かすてきな</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191019]]></title>
        <url>https://yuuzn.github.io/2019/10/19/guitar-20191019/</url>
        <content type="html"><![CDATA[<h3 id="左手動き"><a href="#左手動き" class="headerlink" title="左手動き"></a>左手動き</h3><ul>
<li>D7開放→D7</li>
<li>3フレット6弦、2フレット3弦</li>
<li>3フレット5弦、2フレット3弦</li>
<li>左手はミスっても次へ進めること、止まらないこと</li>
</ul>
<h3 id="右手動き"><a href="#右手動き" class="headerlink" title="右手動き"></a>右手動き</h3><ul>
<li>アルペジオは最初は上から弾く、オルタナティブはまだ</li>
<li>643234</li>
<li>6弦の杭のとこに右手固定し感覚で覚えて見ないで弾けるように</li>
<li>リズムを刻む、間をとったり空振り早くしたりしない、一定のリズム、メトロノーム</li>
<li>腕の位置はピックの位置から逆算、サウンドホールがおすすめ</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[Hello World]]></title>
        <url>https://yuuzn.github.io/2019/10/14/hello-world/</url>
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
        
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191010]]></title>
        <url>https://yuuzn.github.io/2019/10/10/guitar-20191010/</url>
        <content type="html"><![CDATA[<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>Ｆでは人差し指、薬指、小指で押さえる練習から</li>
<li>フレットをどんどん右に移動させる練習も有効</li>
<li>反復の基礎練</li>
<li>右手爪は伸ばすが左手爪は切る</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20191004]]></title>
        <url>https://yuuzn.github.io/2019/10/04/guitar-20191004/</url>
        <content type="html"><![CDATA[<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>ピックの持ち方は弦に対して、親指平行、人差し指垂直</li>
<li>ピックの厚みは0.7~0.8くらいミディアム</li>
<li>右腕をギターにあてて支点にして手首を大きく柔らかく振る</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>弦を覗かなくても触れるように</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20190928]]></title>
        <url>https://yuuzn.github.io/2019/09/28/guitar-20190928/</url>
        <content type="html"><![CDATA[<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>手の力を抜く</li>
<li>撫でる感じで触れるだけ</li>
<li>音の強弱は右手の力でつけるのではなく、右手の振りの大きさでつく</li>
<li>自然と斜めに弾くことになる</li>
<li>アルペジオは6弦ネジの上に右手のひら固定</li>
<li>アルペジオは目で見ずに弦と弦の間隔を手に覚えさせる</li>
<li>空振りを無意識でもできるように</li>
<li>2分は同じストロークを繰り返して練習 </li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>親指を乗せるのは支えの意味もある</li>
<li>親指を乗せるから力が入る</li>
<li>親指とそれ以外の指で挟み込む感じ</li>
<li>何度もコードを押さえる練習をすると、腕に力がつくので、次第に指に強く力をかけなくても押さえられるようになる</li>
<li>左手の押さえの慣れは筋トレみたいな感じで練習量に比例する</li>
<li>コードチェンジの際は最短距離で移動する</li>
<li>コードチェンジでパーにして開かない、リセットは無意味</li>
<li>コードチェンジで親指を無駄に動かさない</li>
<li>コードチェンジで指の形をそのまま使える時は形ごと移動</li>
<li>コードチェンジするときは頭の中で次の指の形を思い浮かべる</li>
<li>7がつくコードは基本形から何かしら指を外すコード！</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[アイネ・クライネ・ナハトムジーク]]></title>
        <url>https://yuuzn.github.io/2019/09/22/ainekuraine/</url>
        <content type="html"><![CDATA[<p>色んな人の人生が重なり合って、<br>みんな一人で生きてるんじゃないんだって想えた映画でした。<br>斉藤さんの歌詞が何度も頭に浮かんだり、<br>伊坂さんの小説のシーンを思い出したり、<br>台詞にクスッと笑えたり、ジーンときたり、<br>作り手のメッセージが凄く伝わってきました。<br>どの世代の人が観ても楽しめる映画だと思います!<br>期待を遥かに超えた仕上がりに感無量！！</p>
]]></content>
        
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> movie </tag>
            
            <tag> saitou-kazuyoshi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[今日のギター 20190921]]></title>
        <url>https://yuuzn.github.io/2019/09/21/guitar-20190921/</url>
        <content type="html"><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="道具"><a href="#道具" class="headerlink" title="道具"></a>道具</h3><ul>
<li>初心者は柔らかいピックを使った方がぎこちない音になりにくい</li>
</ul>
<h3 id="右手動作"><a href="#右手動作" class="headerlink" title="右手動作"></a>右手動作</h3><ul>
<li>ストローク5種を日々練習</li>
<li>1種につき2分は続けて練習</li>
<li>右手練習時はコードはG等で1種でよい</li>
<li>4分音符ごとにアクセント</li>
<li>手は一定の振り</li>
<li>体に染み込むまで練習する</li>
<li>左手練より右手練が先</li>
</ul>
<h3 id="左手動作"><a href="#左手動作" class="headerlink" title="左手動作"></a>左手動作</h3><ul>
<li>6弦から押さえる</li>
<li>Fでは親指を下げる</li>
<li>バレーコード以外では親指位置は固定</li>
<li>フレットに指を乗っけない</li>
<li>基本コード12種をまず身につける</li>
<li>コード進行は少なくとも1つ先を考えながら弾く</li>
</ul>
]]></content>
        
        <categories>
            
            <category> music </category>
            
        </categories>
        
        
        <tags>
            
            <tag> guitar </tag>
            
        </tags>
        
    </entry>
    
    
    
    
    <entry>
        <title><![CDATA[image]]></title>
        <url>https://yuuzn.github.io/image/index.html</url>
        <content type="html"></content>
    </entry>
    
    
</search>
